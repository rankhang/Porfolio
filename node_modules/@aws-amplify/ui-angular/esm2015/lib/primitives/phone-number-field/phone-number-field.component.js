import { Component, HostBinding, Input } from '@angular/core';
import { nanoid } from 'nanoid';
import { countryDialCodes } from '@aws-amplify/ui';
import * as i0 from "@angular/core";
import * as i1 from "../select/select.component";
export class PhoneNumberFieldComponent {
    constructor() {
        this.autocomplete = 'new-password';
        this.disabled = false;
        this.selectFieldId = `amplify-field-${nanoid(12)}`;
        this.textFieldId = `amplify-field-${nanoid(12)}`;
        this.initialValue = '';
        this.label = '';
        this.placeholder = '';
        this.required = true;
        this.labelHidden = false;
        this.display = 'contents';
    }
    ngOnInit() {
        var _a;
        this.countryDialCodesValues = (_a = this.dialCodeList) !== null && _a !== void 0 ? _a : countryDialCodes;
    }
}
PhoneNumberFieldComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: PhoneNumberFieldComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
PhoneNumberFieldComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: PhoneNumberFieldComponent, selector: "amplify-phone-number-field", inputs: { autocomplete: "autocomplete", disabled: "disabled", defaultCountryCode: "defaultCountryCode", selectFieldId: "selectFieldId", textFieldId: "textFieldId", initialValue: "initialValue", label: "label", name: "name", placeholder: "placeholder", required: "required", type: "type", labelHidden: "labelHidden", dialCodeList: "dialCodeList", hasError: "hasError", describedBy: "describedBy" }, host: { properties: { "style.display": "this.display" } }, ngImport: i0, template: "<label\n  class=\"amplify-label\"\n  [class.amplify-visually-hidden]=\"labelHidden\"\n  [for]=\"textFieldId\"\n>\n  {{ label }}\n</label>\n<div\n  class=\"amplify-flex amplify-phonenumberfield\"\n  amplify-field-group\n  style=\"gap: 0px\"\n>\n  <div class=\"amplify-field-group__outer-start\">\n    <div\n      class=\"\n        amplify-flex\n        amplify-field\n        amplify-selectfield\n        amplify-countrycodeselect\n        amplify-dialcodeselect\n      \"\n      style=\"flex-direction: column\"\n    >\n      <amplify-form-select\n        name=\"country_code\"\n        label=\"Country Code\"\n        [id]=\"selectFieldId\"\n        [items]=\"countryDialCodesValues\"\n        [defaultValue]=\"defaultCountryCode\"\n      ></amplify-form-select>\n    </div>\n  </div>\n\n  <input\n    class=\"amplify-input\"\n    [id]=\"textFieldId\"\n    [type]=\"type\"\n    [name]=\"name\"\n    [placeholder]=\"placeholder\"\n    [required]=\"required\"\n    [value]=\"initialValue\"\n    [autocomplete]=\"autocomplete\"\n    [attr.disabled]=\"disabled ? '' : null\"\n    [attr.aria-invalid]=\"hasError ? 'true' : 'false'\"\n    [attr.aria-describedby]=\"describedBy\"\n  />\n</div>\n", components: [{ type: i1.SelectComponent, selector: "amplify-form-select", inputs: ["items", "name", "label", "id", "defaultValue"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: PhoneNumberFieldComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'amplify-phone-number-field',
                    templateUrl: './phone-number-field.component.html',
                }]
        }], propDecorators: { autocomplete: [{
                type: Input
            }], disabled: [{
                type: Input
            }], defaultCountryCode: [{
                type: Input
            }], selectFieldId: [{
                type: Input
            }], textFieldId: [{
                type: Input
            }], initialValue: [{
                type: Input
            }], label: [{
                type: Input
            }], name: [{
                type: Input
            }], placeholder: [{
                type: Input
            }], required: [{
                type: Input
            }], type: [{
                type: Input
            }], labelHidden: [{
                type: Input
            }], dialCodeList: [{
                type: Input
            }], hasError: [{
                type: Input
            }], describedBy: [{
                type: Input
            }], display: [{
                type: HostBinding,
                args: ['style.display']
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGhvbmUtbnVtYmVyLWZpZWxkLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL3VpLWFuZ3VsYXIvc3JjL2xpYi9wcmltaXRpdmVzL3Bob25lLW51bWJlci1maWVsZC9waG9uZS1udW1iZXItZmllbGQuY29tcG9uZW50LnRzIiwiLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvdWktYW5ndWxhci9zcmMvbGliL3ByaW1pdGl2ZXMvcGhvbmUtbnVtYmVyLWZpZWxkL3Bob25lLW51bWJlci1maWVsZC5jb21wb25lbnQuaHRtbCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFdBQVcsRUFBRSxLQUFLLEVBQVUsTUFBTSxlQUFlLENBQUM7QUFDdEUsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLFFBQVEsQ0FBQztBQUNoQyxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQzs7O0FBTW5ELE1BQU0sT0FBTyx5QkFBeUI7SUFKdEM7UUFLVyxpQkFBWSxHQUFHLGNBQWMsQ0FBQztRQUM5QixhQUFRLEdBQUcsS0FBSyxDQUFDO1FBRWpCLGtCQUFhLEdBQUcsaUJBQWlCLE1BQU0sQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDO1FBQzlDLGdCQUFXLEdBQUcsaUJBQWlCLE1BQU0sQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDO1FBQzVDLGlCQUFZLEdBQUcsRUFBRSxDQUFDO1FBQ2xCLFVBQUssR0FBRyxFQUFFLENBQUM7UUFFWCxnQkFBVyxHQUFHLEVBQUUsQ0FBQztRQUNqQixhQUFRLEdBQUcsSUFBSSxDQUFDO1FBRWhCLGdCQUFXLEdBQUcsS0FBSyxDQUFDO1FBS0MsWUFBTyxHQUFHLFVBQVUsQ0FBQztLQU9wRDtJQUhDLFFBQVE7O1FBQ04sSUFBSSxDQUFDLHNCQUFzQixHQUFHLE1BQUEsSUFBSSxDQUFDLFlBQVksbUNBQUksZ0JBQWdCLENBQUM7SUFDdEUsQ0FBQzs7dUhBdkJVLHlCQUF5QjsyR0FBekIseUJBQXlCLDJnQkNSdEMsdXFDQStDQTs0RkR2Q2EseUJBQXlCO2tCQUpyQyxTQUFTO21CQUFDO29CQUNULFFBQVEsRUFBRSw0QkFBNEI7b0JBQ3RDLFdBQVcsRUFBRSxxQ0FBcUM7aUJBQ25EOzhCQUVVLFlBQVk7c0JBQXBCLEtBQUs7Z0JBQ0csUUFBUTtzQkFBaEIsS0FBSztnQkFDRyxrQkFBa0I7c0JBQTFCLEtBQUs7Z0JBQ0csYUFBYTtzQkFBckIsS0FBSztnQkFDRyxXQUFXO3NCQUFuQixLQUFLO2dCQUNHLFlBQVk7c0JBQXBCLEtBQUs7Z0JBQ0csS0FBSztzQkFBYixLQUFLO2dCQUNHLElBQUk7c0JBQVosS0FBSztnQkFDRyxXQUFXO3NCQUFuQixLQUFLO2dCQUNHLFFBQVE7c0JBQWhCLEtBQUs7Z0JBQ0csSUFBSTtzQkFBWixLQUFLO2dCQUNHLFdBQVc7c0JBQW5CLEtBQUs7Z0JBQ0csWUFBWTtzQkFBcEIsS0FBSztnQkFDRyxRQUFRO3NCQUFoQixLQUFLO2dCQUNHLFdBQVc7c0JBQW5CLEtBQUs7Z0JBRXdCLE9BQU87c0JBQXBDLFdBQVc7dUJBQUMsZUFBZSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgSG9zdEJpbmRpbmcsIElucHV0LCBPbkluaXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IG5hbm9pZCB9IGZyb20gJ25hbm9pZCc7XG5pbXBvcnQgeyBjb3VudHJ5RGlhbENvZGVzIH0gZnJvbSAnQGF3cy1hbXBsaWZ5L3VpJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnYW1wbGlmeS1waG9uZS1udW1iZXItZmllbGQnLFxuICB0ZW1wbGF0ZVVybDogJy4vcGhvbmUtbnVtYmVyLWZpZWxkLmNvbXBvbmVudC5odG1sJyxcbn0pXG5leHBvcnQgY2xhc3MgUGhvbmVOdW1iZXJGaWVsZENvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCB7XG4gIEBJbnB1dCgpIGF1dG9jb21wbGV0ZSA9ICduZXctcGFzc3dvcmQnO1xuICBASW5wdXQoKSBkaXNhYmxlZCA9IGZhbHNlO1xuICBASW5wdXQoKSBkZWZhdWx0Q291bnRyeUNvZGU6IHN0cmluZztcbiAgQElucHV0KCkgc2VsZWN0RmllbGRJZCA9IGBhbXBsaWZ5LWZpZWxkLSR7bmFub2lkKDEyKX1gO1xuICBASW5wdXQoKSB0ZXh0RmllbGRJZCA9IGBhbXBsaWZ5LWZpZWxkLSR7bmFub2lkKDEyKX1gO1xuICBASW5wdXQoKSBpbml0aWFsVmFsdWUgPSAnJztcbiAgQElucHV0KCkgbGFiZWwgPSAnJztcbiAgQElucHV0KCkgbmFtZTogc3RyaW5nO1xuICBASW5wdXQoKSBwbGFjZWhvbGRlciA9ICcnO1xuICBASW5wdXQoKSByZXF1aXJlZCA9IHRydWU7XG4gIEBJbnB1dCgpIHR5cGU6IHN0cmluZztcbiAgQElucHV0KCkgbGFiZWxIaWRkZW4gPSBmYWxzZTtcbiAgQElucHV0KCkgZGlhbENvZGVMaXN0OiBBcnJheTxzdHJpbmc+O1xuICBASW5wdXQoKSBoYXNFcnJvcjogYm9vbGVhbjtcbiAgQElucHV0KCkgZGVzY3JpYmVkQnk6IHN0cmluZztcblxuICBASG9zdEJpbmRpbmcoJ3N0eWxlLmRpc3BsYXknKSBkaXNwbGF5ID0gJ2NvbnRlbnRzJztcblxuICBwdWJsaWMgY291bnRyeURpYWxDb2Rlc1ZhbHVlczogQXJyYXk8c3RyaW5nPjtcblxuICBuZ09uSW5pdCgpOiB2b2lkIHtcbiAgICB0aGlzLmNvdW50cnlEaWFsQ29kZXNWYWx1ZXMgPSB0aGlzLmRpYWxDb2RlTGlzdCA/PyBjb3VudHJ5RGlhbENvZGVzO1xuICB9XG59XG4iLCI8bGFiZWxcbiAgY2xhc3M9XCJhbXBsaWZ5LWxhYmVsXCJcbiAgW2NsYXNzLmFtcGxpZnktdmlzdWFsbHktaGlkZGVuXT1cImxhYmVsSGlkZGVuXCJcbiAgW2Zvcl09XCJ0ZXh0RmllbGRJZFwiXG4+XG4gIHt7IGxhYmVsIH19XG48L2xhYmVsPlxuPGRpdlxuICBjbGFzcz1cImFtcGxpZnktZmxleCBhbXBsaWZ5LXBob25lbnVtYmVyZmllbGRcIlxuICBhbXBsaWZ5LWZpZWxkLWdyb3VwXG4gIHN0eWxlPVwiZ2FwOiAwcHhcIlxuPlxuICA8ZGl2IGNsYXNzPVwiYW1wbGlmeS1maWVsZC1ncm91cF9fb3V0ZXItc3RhcnRcIj5cbiAgICA8ZGl2XG4gICAgICBjbGFzcz1cIlxuICAgICAgICBhbXBsaWZ5LWZsZXhcbiAgICAgICAgYW1wbGlmeS1maWVsZFxuICAgICAgICBhbXBsaWZ5LXNlbGVjdGZpZWxkXG4gICAgICAgIGFtcGxpZnktY291bnRyeWNvZGVzZWxlY3RcbiAgICAgICAgYW1wbGlmeS1kaWFsY29kZXNlbGVjdFxuICAgICAgXCJcbiAgICAgIHN0eWxlPVwiZmxleC1kaXJlY3Rpb246IGNvbHVtblwiXG4gICAgPlxuICAgICAgPGFtcGxpZnktZm9ybS1zZWxlY3RcbiAgICAgICAgbmFtZT1cImNvdW50cnlfY29kZVwiXG4gICAgICAgIGxhYmVsPVwiQ291bnRyeSBDb2RlXCJcbiAgICAgICAgW2lkXT1cInNlbGVjdEZpZWxkSWRcIlxuICAgICAgICBbaXRlbXNdPVwiY291bnRyeURpYWxDb2Rlc1ZhbHVlc1wiXG4gICAgICAgIFtkZWZhdWx0VmFsdWVdPVwiZGVmYXVsdENvdW50cnlDb2RlXCJcbiAgICAgID48L2FtcGxpZnktZm9ybS1zZWxlY3Q+XG4gICAgPC9kaXY+XG4gIDwvZGl2PlxuXG4gIDxpbnB1dFxuICAgIGNsYXNzPVwiYW1wbGlmeS1pbnB1dFwiXG4gICAgW2lkXT1cInRleHRGaWVsZElkXCJcbiAgICBbdHlwZV09XCJ0eXBlXCJcbiAgICBbbmFtZV09XCJuYW1lXCJcbiAgICBbcGxhY2Vob2xkZXJdPVwicGxhY2Vob2xkZXJcIlxuICAgIFtyZXF1aXJlZF09XCJyZXF1aXJlZFwiXG4gICAgW3ZhbHVlXT1cImluaXRpYWxWYWx1ZVwiXG4gICAgW2F1dG9jb21wbGV0ZV09XCJhdXRvY29tcGxldGVcIlxuICAgIFthdHRyLmRpc2FibGVkXT1cImRpc2FibGVkID8gJycgOiBudWxsXCJcbiAgICBbYXR0ci5hcmlhLWludmFsaWRdPVwiaGFzRXJyb3IgPyAndHJ1ZScgOiAnZmFsc2UnXCJcbiAgICBbYXR0ci5hcmlhLWRlc2NyaWJlZGJ5XT1cImRlc2NyaWJlZEJ5XCJcbiAgLz5cbjwvZGl2PlxuIl19