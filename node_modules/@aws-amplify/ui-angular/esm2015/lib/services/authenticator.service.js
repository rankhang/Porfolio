import { Injectable } from '@angular/core';
import { Logger } from '@aws-amplify/core';
import { createAuthenticatorMachine, getServiceFacade, } from '@aws-amplify/ui';
import { interpret } from 'xstate';
import { translate } from '@aws-amplify/ui';
import * as i0 from "@angular/core";
const logger = new Logger('state-machine');
/**
 * AuthenticatorService provides access to the authenticator state and context.
 */
export class AuthenticatorService {
    constructor() {
        const machine = createAuthenticatorMachine();
        const authService = interpret(machine).start();
        this._machineSubscription = authService.subscribe((state) => {
            const newState = state;
            this._authState = newState;
            this._facade = getServiceFacade({
                send: authService.send,
                state: newState,
            });
        });
        this._authService = authService;
    }
    ngOnDestroy() {
        if (this._machineSubscription)
            this._machineSubscription.unsubscribe();
    }
    /**
     * Context facades
     */
    get error() {
        var _a;
        return translate((_a = this._facade) === null || _a === void 0 ? void 0 : _a.error);
    }
    get hasValidationErrors() {
        var _a;
        return (_a = this._facade) === null || _a === void 0 ? void 0 : _a.hasValidationErrors;
    }
    get isPending() {
        var _a;
        return (_a = this._facade) === null || _a === void 0 ? void 0 : _a.isPending;
    }
    get route() {
        var _a;
        return (_a = this._facade) === null || _a === void 0 ? void 0 : _a.route;
    }
    get authStatus() {
        var _a;
        return (_a = this._facade) === null || _a === void 0 ? void 0 : _a.authStatus;
    }
    get user() {
        var _a;
        return (_a = this._facade) === null || _a === void 0 ? void 0 : _a.user;
    }
    get validationErrors() {
        var _a;
        return (_a = this._facade) === null || _a === void 0 ? void 0 : _a.validationErrors;
    }
    get codeDeliveryDetails() {
        var _a;
        return (_a = this._facade) === null || _a === void 0 ? void 0 : _a.codeDeliveryDetails;
    }
    get totpSecretCode() {
        var _a;
        return (_a = this._facade) === null || _a === void 0 ? void 0 : _a.totpSecretCode;
    }
    /**
     * Service facades
     */
    get initializeMachine() {
        return this._facade.initializeMachine;
    }
    get updateForm() {
        return this._facade.updateForm;
    }
    get updateBlur() {
        return this._facade.updateBlur;
    }
    get resendCode() {
        return this._facade.resendCode;
    }
    get signOut() {
        return this._facade.signOut;
    }
    get submitForm() {
        return this._facade.submitForm;
    }
    /**
     * Transition facades
     */
    get toFederatedSignIn() {
        return this._facade.toFederatedSignIn;
    }
    get toResetPassword() {
        return this._facade.toResetPassword;
    }
    get toSignIn() {
        return this._facade.toSignIn;
    }
    get toSignUp() {
        return this._facade.toSignUp;
    }
    get skipVerification() {
        return this._facade.skipVerification;
    }
    /**
     * Internal utility functions
     */
    /** @deprecated For internal use only */
    get authState() {
        return this._authState;
    }
    /** @deprecated For internal use only */
    get authService() {
        return this._authService;
    }
    /** @deprecated For internal use only */
    get context() {
        return this._authState.context;
    }
    /** @deprecated For internal use only */
    get slotContext() {
        return Object.assign(Object.assign({}, this._facade), { $implicit: this._facade });
    }
    subscribe(callback) {
        if (!this._authService) {
            logger.error('Subscription attempted before machine was created. This is likely a bug on the library, please consider filing a bug.');
        }
        const subscription = this._authService.subscribe(() => {
            callback(this._facade);
        });
        return subscription;
    }
    /** @deprecated For internal use only */
    send(event) {
        this.authService.send(event);
    }
}
AuthenticatorService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AuthenticatorService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
AuthenticatorService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AuthenticatorService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AuthenticatorService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root', // ensure we have a singleton service
                }]
        }], ctorParameters: function () { return []; } });
//# sourceMappingURL=data:application/json;base64,