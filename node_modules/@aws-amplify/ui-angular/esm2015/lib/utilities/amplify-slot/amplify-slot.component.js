import { Component, HostBinding, Input, } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "../../services/custom-components.service";
import * as i2 from "@angular/common";
export class AmplifySlotComponent {
    constructor(propService) {
        this.propService = propService;
        this.display = 'contents';
        this.isOverriden = false;
    }
    ngAfterContentInit() {
        const { customComponents } = this.propService;
        const overridingComponent = customComponents[this.name];
        if (overridingComponent) {
            this.overridingComponent = overridingComponent;
            this.isOverriden = true;
        }
    }
}
AmplifySlotComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: AmplifySlotComponent, deps: [{ token: i1.CustomComponentsService }], target: i0.ɵɵFactoryTarget.Component });
AmplifySlotComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: AmplifySlotComponent, selector: "amplify-slot", inputs: { name: "name", context: "context" }, host: { properties: { "style.display": "this.display" } }, ngImport: i0, template: "<!-- \n  if slot isn't overwritten, we display the the default coponent, which is the \n  children passed onto this component.\n-->\n<ng-content *ngIf=\"!isOverriden\"></ng-content>\n\n<!-- If slot is overwritten, we render that instead. -->\n<ng-container\n  *ngIf=\"isOverriden\"\n  [ngTemplateOutlet]=\"overridingComponent\"\n  [ngTemplateOutletContext]=\"context\"\n></ng-container>\n", directives: [{ type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i2.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: AmplifySlotComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'amplify-slot',
                    templateUrl: './amplify-slot.component.html',
                }]
        }], ctorParameters: function () { return [{ type: i1.CustomComponentsService }]; }, propDecorators: { name: [{
                type: Input
            }], context: [{
                type: Input
            }], display: [{
                type: HostBinding,
                args: ['style.display']
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYW1wbGlmeS1zbG90LmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL3VpLWFuZ3VsYXIvc3JjL2xpYi91dGlsaXRpZXMvYW1wbGlmeS1zbG90L2FtcGxpZnktc2xvdC5jb21wb25lbnQudHMiLCIuLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy91aS1hbmd1bGFyL3NyYy9saWIvdXRpbGl0aWVzL2FtcGxpZnktc2xvdC9hbXBsaWZ5LXNsb3QuY29tcG9uZW50Lmh0bWwiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUVMLFNBQVMsRUFDVCxXQUFXLEVBQ1gsS0FBSyxHQUVOLE1BQU0sZUFBZSxDQUFDOzs7O0FBT3ZCLE1BQU0sT0FBTyxvQkFBb0I7SUFTL0IsWUFBb0IsV0FBb0M7UUFBcEMsZ0JBQVcsR0FBWCxXQUFXLENBQXlCO1FBTDFCLFlBQU8sR0FBRyxVQUFVLENBQUM7UUFHNUMsZ0JBQVcsR0FBRyxLQUFLLENBQUM7SUFFZ0MsQ0FBQztJQUU1RCxrQkFBa0I7UUFDaEIsTUFBTSxFQUFFLGdCQUFnQixFQUFFLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQztRQUM5QyxNQUFNLG1CQUFtQixHQUFHLGdCQUFnQixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUV4RCxJQUFJLG1CQUFtQixFQUFFO1lBQ3ZCLElBQUksQ0FBQyxtQkFBbUIsR0FBRyxtQkFBbUIsQ0FBQztZQUMvQyxJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQztTQUN6QjtJQUNILENBQUM7O2tIQW5CVSxvQkFBb0I7c0dBQXBCLG9CQUFvQiw2SkNiakMsc1lBWUE7NEZEQ2Esb0JBQW9CO2tCQUpoQyxTQUFTO21CQUFDO29CQUNULFFBQVEsRUFBRSxjQUFjO29CQUN4QixXQUFXLEVBQUUsK0JBQStCO2lCQUM3Qzs4R0FFVSxJQUFJO3NCQUFaLEtBQUs7Z0JBQ0csT0FBTztzQkFBZixLQUFLO2dCQUV3QixPQUFPO3NCQUFwQyxXQUFXO3VCQUFDLGVBQWUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBBZnRlckNvbnRlbnRJbml0LFxuICBDb21wb25lbnQsXG4gIEhvc3RCaW5kaW5nLFxuICBJbnB1dCxcbiAgVGVtcGxhdGVSZWYsXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ3VzdG9tQ29tcG9uZW50c1NlcnZpY2UgfSBmcm9tICcuLi8uLi9zZXJ2aWNlcy9jdXN0b20tY29tcG9uZW50cy5zZXJ2aWNlJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnYW1wbGlmeS1zbG90JyxcbiAgdGVtcGxhdGVVcmw6ICcuL2FtcGxpZnktc2xvdC5jb21wb25lbnQuaHRtbCcsXG59KVxuZXhwb3J0IGNsYXNzIEFtcGxpZnlTbG90Q29tcG9uZW50IGltcGxlbWVudHMgQWZ0ZXJDb250ZW50SW5pdCB7XG4gIEBJbnB1dCgpIG5hbWU6IHN0cmluZztcbiAgQElucHV0KCkgY29udGV4dDogUmVjb3JkPFByb3BlcnR5S2V5LCB1bmtub3duPjtcblxuICBASG9zdEJpbmRpbmcoJ3N0eWxlLmRpc3BsYXknKSBkaXNwbGF5ID0gJ2NvbnRlbnRzJztcblxuICBwdWJsaWMgb3ZlcnJpZGluZ0NvbXBvbmVudDogVGVtcGxhdGVSZWY8dW5rbm93bj47XG4gIHB1YmxpYyBpc092ZXJyaWRlbiA9IGZhbHNlO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgcHJvcFNlcnZpY2U6IEN1c3RvbUNvbXBvbmVudHNTZXJ2aWNlKSB7fVxuXG4gIG5nQWZ0ZXJDb250ZW50SW5pdCgpOiB2b2lkIHtcbiAgICBjb25zdCB7IGN1c3RvbUNvbXBvbmVudHMgfSA9IHRoaXMucHJvcFNlcnZpY2U7XG4gICAgY29uc3Qgb3ZlcnJpZGluZ0NvbXBvbmVudCA9IGN1c3RvbUNvbXBvbmVudHNbdGhpcy5uYW1lXTtcblxuICAgIGlmIChvdmVycmlkaW5nQ29tcG9uZW50KSB7XG4gICAgICB0aGlzLm92ZXJyaWRpbmdDb21wb25lbnQgPSBvdmVycmlkaW5nQ29tcG9uZW50O1xuICAgICAgdGhpcy5pc092ZXJyaWRlbiA9IHRydWU7XG4gICAgfVxuICB9XG59XG4iLCI8IS0tIFxuICBpZiBzbG90IGlzbid0IG92ZXJ3cml0dGVuLCB3ZSBkaXNwbGF5IHRoZSB0aGUgZGVmYXVsdCBjb3BvbmVudCwgd2hpY2ggaXMgdGhlIFxuICBjaGlsZHJlbiBwYXNzZWQgb250byB0aGlzIGNvbXBvbmVudC5cbi0tPlxuPG5nLWNvbnRlbnQgKm5nSWY9XCIhaXNPdmVycmlkZW5cIj48L25nLWNvbnRlbnQ+XG5cbjwhLS0gSWYgc2xvdCBpcyBvdmVyd3JpdHRlbiwgd2UgcmVuZGVyIHRoYXQgaW5zdGVhZC4gLS0+XG48bmctY29udGFpbmVyXG4gICpuZ0lmPVwiaXNPdmVycmlkZW5cIlxuICBbbmdUZW1wbGF0ZU91dGxldF09XCJvdmVycmlkaW5nQ29tcG9uZW50XCJcbiAgW25nVGVtcGxhdGVPdXRsZXRDb250ZXh0XT1cImNvbnRleHRcIlxuPjwvbmctY29udGFpbmVyPlxuIl19