import { __awaiter } from "tslib";
import { Component, HostBinding } from '@angular/core';
import QRCode from 'qrcode';
import { Logger } from 'aws-amplify';
import { getActorContext, getFormDataFromEvent, getTotpCodeURL, authenticatorTextUtil, } from '@aws-amplify/ui';
import * as i0 from "@angular/core";
import * as i1 from "../../../../services/authenticator.service";
import * as i2 from "../../../../utilities/amplify-slot/amplify-slot.component";
import * as i3 from "../base-form-fields/base-form-fields.component";
import * as i4 from "../../../../primitives/button/button.component";
import * as i5 from "../../../../primitives/error/error.component";
import * as i6 from "@angular/common";
const logger = new Logger('SetupTotp');
const { getSetupTOTPText, getCopyText, getBackToSignInText, getConfirmText, getCopiedText, } = authenticatorTextUtil;
export class SetupTotpComponent {
    constructor(authenticator) {
        this.authenticator = authenticator;
        this.dataAttr = '';
        this.headerText = getSetupTOTPText();
        this.qrCodeSource = '';
        this.totpSecretCode = '';
        this.copyTextLabel = getCopyText();
        // translated texts
        this.backToSignInText = getBackToSignInText();
        this.confirmText = getConfirmText();
    }
    ngOnInit() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.generateQRCode();
        });
    }
    get context() {
        return this.authenticator.slotContext;
    }
    generateQRCode() {
        var _a, _b;
        return __awaiter(this, void 0, void 0, function* () {
            const { authState: state, totpSecretCode, user } = this.authenticator;
            const { formFields } = getActorContext(state);
            const { totpIssuer = 'AWSCognito', totpUsername = user === null || user === void 0 ? void 0 : user.username } = (_b = (_a = formFields === null || formFields === void 0 ? void 0 : formFields.setupTOTP) === null || _a === void 0 ? void 0 : _a.QR) !== null && _b !== void 0 ? _b : {};
            this.totpSecretCode = totpSecretCode;
            try {
                const totpCode = getTotpCodeURL(totpIssuer, totpUsername, this.totpSecretCode);
                logger.info('totp code was generated:', totpCode);
                this.qrCodeSource = yield QRCode.toDataURL(totpCode);
            }
            catch (err) {
                logger.error(err);
            }
        });
    }
    onInput(event) {
        event.preventDefault();
        const { name, value } = event.target;
        this.authenticator.updateForm({ name, value });
    }
    onSubmit(event) {
        event.preventDefault();
        this.authenticator.submitForm(getFormDataFromEvent(event));
    }
    copyText() {
        navigator.clipboard.writeText(this.totpSecretCode);
        this.copyTextLabel = getCopiedText();
    }
}
SetupTotpComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: SetupTotpComponent, deps: [{ token: i1.AuthenticatorService }], target: i0.ɵɵFactoryTarget.Component });
SetupTotpComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: SetupTotpComponent, selector: "amplify-setup-totp", host: { properties: { "attr.data-amplify-authenticator-setup-totp": "this.dataAttr" } }, ngImport: i0, template: "<form data-amplify-form (submit)=\"onSubmit($event)\" (input)=\"onInput($event)\">\n  <fieldset\n    class=\"amplify-flex amplify-authenticator__column\"\n    data-amplify-fieldset\n    [disabled]=\"authenticator.isPending\"\n  >\n    <amplify-slot name=\"setup-totp-header\" [context]=\"context\">\n      <h3 class=\"amplify-heading amplify-heading--3\">{{ this.headerText }}</h3>\n    </amplify-slot>\n    <p *ngIf=\"!qrCodeSource\">Loading...</p>\n    <img\n      *ngIf=\"qrCodeSource\"\n      [src]=\"qrCodeSource\"\n      alt=\"qr code\"\n      data-amplify-qrcode\n      width=\"228\"\n      height=\"228\"\n    />\n    <div class=\"amplify-flex\" data-amplify-copy>\n      <div>{{ totpSecretCode }}</div>\n      <div data-amplify-copy-svg (click)=\"copyText()\">\n        <div data-amplify-copy-tooltip>{{ copyTextLabel }}</div>\n        <svg\n          width=\"24\"\n          height=\"24\"\n          viewBox=\"0 0 24 24\"\n          xmlns=\"http://www.w3.org/2000/svg\"\n        >\n          <path\n            d=\"M16 1H4C2.9 1 2 1.9 2 3V17H4V3H16V1ZM15 5H8C6.9 5 6.01 5.9 6.01 7L6 21C6 22.1 6.89 23 7.99 23H19C20.1 23 21 22.1 21 21V11L15 5ZM8 21V7H14V12H19V21H8Z\"\n          />\n        </svg>\n      </div>\n    </div>\n\n    <amplify-base-form-fields route=\"setupTOTP\"></amplify-base-form-fields>\n    <button\n      amplify-button\n      variation=\"primary\"\n      fullWidth=\"true\"\n      type=\"submit\"\n      [isDisabled]=\"authenticator.isPending\"\n    >\n      {{ confirmText }}\n    </button>\n    <button\n      amplify-button\n      size=\"small\"\n      variation=\"link\"\n      fontWeight=\"normal\"\n      fullWidth=\"true\"\n      (click)=\"authenticator.toSignIn()\"\n    >\n      {{ backToSignInText }}\n    </button>\n    <amplify-error *ngIf=\"authenticator.error\">\n      {{ authenticator.error }}\n    </amplify-error>\n  </fieldset>\n  <amplify-slot name=\"setup-totp-footer\" [context]=\"context\"> </amplify-slot>\n</form>\n", components: [{ type: i2.AmplifySlotComponent, selector: "amplify-slot", inputs: ["name", "context"] }, { type: i3.BaseFormFieldsComponent, selector: "amplify-base-form-fields", inputs: ["route"] }, { type: i4.ButtonComponent, selector: "button[amplify-button]", inputs: ["type", "fullWidth", "isDisabled", "size", "variation", "fontWeight"] }, { type: i5.ErrorComponent, selector: "amplify-error" }], directives: [{ type: i6.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: SetupTotpComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'amplify-setup-totp',
                    templateUrl: './setup-totp.component.html',
                }]
        }], ctorParameters: function () { return [{ type: i1.AuthenticatorService }]; }, propDecorators: { dataAttr: [{
                type: HostBinding,
                args: ['attr.data-amplify-authenticator-setup-totp']
            }] } });
//# sourceMappingURL=data:application/json;base64,