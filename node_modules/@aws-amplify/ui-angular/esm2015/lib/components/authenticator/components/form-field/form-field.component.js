import { Component, Input } from '@angular/core';
import { translate, countryDialCodes, getErrors, } from '@aws-amplify/ui';
import { nanoid } from 'nanoid';
import * as i0 from "@angular/core";
import * as i1 from "../../../../services/authenticator.service";
import * as i2 from "../../../../primitives/phone-number-field/phone-number-field.component";
import * as i3 from "../../../../primitives/password-field/password-field.component";
import * as i4 from "../../../../primitives/text-field/text-field.component";
import * as i5 from "@angular/common";
export class FormFieldComponent {
    constructor(authenticator) {
        this.authenticator = authenticator;
        this.countryDialCodesValue = countryDialCodes;
        this.errorId = nanoid(12);
    }
    get ariaDescribedBy() {
        return this.hasError() ? this.errorId : undefined;
    }
    get errors() {
        const { validationErrors } = this.authenticator;
        return getErrors(validationErrors[this.name]);
    }
    onBlur($event) {
        const { name } = $event.target;
        this.authenticator.updateBlur({ name });
    }
    isPasswordField() {
        return this.formField.type === 'password';
    }
    isPhoneField() {
        return this.formField.type === 'tel';
    }
    hasError() {
        var _a;
        return ((_a = this.errors) === null || _a === void 0 ? void 0 : _a.length) > 0;
    }
    translate(phrase) {
        return translate(phrase);
    }
}
FormFieldComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: FormFieldComponent, deps: [{ token: i1.AuthenticatorService }], target: i0.ɵɵFactoryTarget.Component });
FormFieldComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: FormFieldComponent, selector: "amplify-form-field", inputs: { name: "name", formField: "formField" }, ngImport: i0, template: "<div class=\"amplify-flex amplify-field amplify-authenticator__column\">\n  <!-- Country code field -->\n  <amplify-phone-number-field\n    *ngIf=\"isPhoneField()\"\n    [name]=\"name\"\n    [label]=\"formField.label\"\n    [defaultCountryCode]=\"formField.dialCode\"\n    [dialCodeList]=\"formField.dialCodeList\"\n    [placeholder]=\"formField.placeholder\"\n    [required]=\"formField.isRequired\"\n    [labelHidden]=\"formField.labelHidden\"\n    [autocomplete]=\"formField.autocomplete\"\n    [hasError]=\"hasError\"\n    [describedBy]=\"ariaDescribedBy\"\n    type=\"tel\"\n  ></amplify-phone-number-field>\n\n  <amplify-password-field\n    *ngIf=\"isPasswordField()\"\n    [name]=\"name\"\n    [label]=\"formField.label\"\n    [placeholder]=\"formField.placeholder\"\n    [required]=\"formField.isRequired\"\n    [labelHidden]=\"formField.labelHidden\"\n    [autocomplete]=\"formField.autocomplete\"\n    [hasError]=\"hasError\"\n    [describedBy]=\"ariaDescribedBy\"\n    (setBlur)=\"onBlur($event)\"\n  ></amplify-password-field>\n\n  <amplify-text-field\n    *ngIf=\"!isPasswordField() && !isPhoneField()\"\n    [name]=\"name\"\n    [label]=\"formField.label\"\n    [placeholder]=\"formField.placeholder\"\n    [required]=\"formField.isRequired\"\n    [labelHidden]=\"formField.labelHidden\"\n    [autocomplete]=\"formField.autocomplete\"\n    [type]=\"formField.type\"\n    [hasError]=\"hasError\"\n    [describedBy]=\"ariaDescribedBy\"\n  ></amplify-text-field>\n\n  <div data-amplify-sign-up-errors *ngIf=\"hasError()\" [id]=\"errorId\">\n    <div\n      class=\"amplify-text amplify-text--error\"\n      data-variation=\"error\"\n      *ngFor=\"let error of errors\"\n    >\n      {{ translate(error) }}\n    </div>\n  </div>\n</div>\n", components: [{ type: i2.PhoneNumberFieldComponent, selector: "amplify-phone-number-field", inputs: ["autocomplete", "disabled", "defaultCountryCode", "selectFieldId", "textFieldId", "initialValue", "label", "name", "placeholder", "required", "type", "labelHidden", "dialCodeList", "hasError", "describedBy"] }, { type: i3.PasswordFieldComponent, selector: "amplify-password-field", inputs: ["autocomplete", "disabled", "fieldId", "initialValue", "label", "name", "placeholder", "required", "labelHidden", "hasError", "describedBy"], outputs: ["setBlur"] }, { type: i4.TextFieldComponent, selector: "amplify-text-field", inputs: ["autocomplete", "disabled", "fieldId", "initialValue", "label", "name", "placeholder", "required", "type", "labelHidden", "hasError", "describedBy"] }], directives: [{ type: i5.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i5.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: FormFieldComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'amplify-form-field',
                    templateUrl: './form-field.component.html',
                }]
        }], ctorParameters: function () { return [{ type: i1.AuthenticatorService }]; }, propDecorators: { name: [{
                type: Input
            }], formField: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9ybS1maWVsZC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy91aS1hbmd1bGFyL3NyYy9saWIvY29tcG9uZW50cy9hdXRoZW50aWNhdG9yL2NvbXBvbmVudHMvZm9ybS1maWVsZC9mb3JtLWZpZWxkLmNvbXBvbmVudC50cyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL3VpLWFuZ3VsYXIvc3JjL2xpYi9jb21wb25lbnRzL2F1dGhlbnRpY2F0b3IvY29tcG9uZW50cy9mb3JtLWZpZWxkL2Zvcm0tZmllbGQuY29tcG9uZW50Lmh0bWwiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDakQsT0FBTyxFQUNMLFNBQVMsRUFDVCxnQkFBZ0IsRUFFaEIsU0FBUyxHQUNWLE1BQU0saUJBQWlCLENBQUM7QUFDekIsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLFFBQVEsQ0FBQzs7Ozs7OztBQU9oQyxNQUFNLE9BQU8sa0JBQWtCO0lBUTdCLFlBQW9CLGFBQW1DO1FBQW5DLGtCQUFhLEdBQWIsYUFBYSxDQUFzQjtRQUhoRCwwQkFBcUIsR0FBRyxnQkFBZ0IsQ0FBQztRQUN6QyxZQUFPLEdBQUcsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBRThCLENBQUM7SUFFM0QsSUFBSSxlQUFlO1FBQ2pCLE9BQU8sSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUM7SUFDcEQsQ0FBQztJQUVELElBQUksTUFBTTtRQUNSLE1BQU0sRUFBRSxnQkFBZ0IsRUFBRSxHQUFHLElBQUksQ0FBQyxhQUFhLENBQUM7UUFDaEQsT0FBTyxTQUFTLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7SUFDaEQsQ0FBQztJQUVNLE1BQU0sQ0FBQyxNQUFhO1FBQ3pCLE1BQU0sRUFBRSxJQUFJLEVBQUUsR0FBcUIsTUFBTSxDQUFDLE1BQU0sQ0FBQztRQUVqRCxJQUFJLENBQUMsYUFBYSxDQUFDLFVBQVUsQ0FBQyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7SUFDMUMsQ0FBQztJQUVELGVBQWU7UUFDYixPQUFPLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxLQUFLLFVBQVUsQ0FBQztJQUM1QyxDQUFDO0lBRUQsWUFBWTtRQUNWLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLEtBQUssS0FBSyxDQUFDO0lBQ3ZDLENBQUM7SUFFRCxRQUFROztRQUNOLE9BQU8sQ0FBQSxNQUFBLElBQUksQ0FBQyxNQUFNLDBDQUFFLE1BQU0sSUFBRyxDQUFDLENBQUM7SUFDakMsQ0FBQztJQUVELFNBQVMsQ0FBQyxNQUFjO1FBQ3RCLE9BQU8sU0FBUyxDQUFTLE1BQU0sQ0FBQyxDQUFDO0lBQ25DLENBQUM7O2dIQXZDVSxrQkFBa0I7b0dBQWxCLGtCQUFrQiw0R0NkL0IsdXREQXFEQTs0RkR2Q2Esa0JBQWtCO2tCQUo5QixTQUFTO21CQUFDO29CQUNULFFBQVEsRUFBRSxvQkFBb0I7b0JBQzlCLFdBQVcsRUFBRSw2QkFBNkI7aUJBQzNDOzJHQUVVLElBQUk7c0JBQVosS0FBSztnQkFDRyxTQUFTO3NCQUFqQixLQUFLIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBJbnB1dCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtcbiAgdHJhbnNsYXRlLFxuICBjb3VudHJ5RGlhbENvZGVzLFxuICBGb3JtRmllbGRPcHRpb25zLFxuICBnZXRFcnJvcnMsXG59IGZyb20gJ0Bhd3MtYW1wbGlmeS91aSc7XG5pbXBvcnQgeyBuYW5vaWQgfSBmcm9tICduYW5vaWQnO1xuaW1wb3J0IHsgQXV0aGVudGljYXRvclNlcnZpY2UgfSBmcm9tICcuLi8uLi8uLi8uLi9zZXJ2aWNlcy9hdXRoZW50aWNhdG9yLnNlcnZpY2UnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdhbXBsaWZ5LWZvcm0tZmllbGQnLFxuICB0ZW1wbGF0ZVVybDogJy4vZm9ybS1maWVsZC5jb21wb25lbnQuaHRtbCcsXG59KVxuZXhwb3J0IGNsYXNzIEZvcm1GaWVsZENvbXBvbmVudCB7XG4gIEBJbnB1dCgpIG5hbWU6IHN0cmluZzsgLy8gbmFtZSBvZiB0aGUgaW5wdXQgZmllbGRcbiAgQElucHV0KCkgZm9ybUZpZWxkOiBGb3JtRmllbGRPcHRpb25zOyAvLyBmb3JtIGZpZWxkIG9wdGlvbnMgZm9yIHRoaXMgZmllbGRcblxuICBwdWJsaWMgZGVmYXVsdENvdW50cnlDb2RlVmFsdWU6IHN0cmluZztcbiAgcHVibGljIGNvdW50cnlEaWFsQ29kZXNWYWx1ZSA9IGNvdW50cnlEaWFsQ29kZXM7XG4gIHB1YmxpYyBlcnJvcklkID0gbmFub2lkKDEyKTtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGF1dGhlbnRpY2F0b3I6IEF1dGhlbnRpY2F0b3JTZXJ2aWNlKSB7fVxuXG4gIGdldCBhcmlhRGVzY3JpYmVkQnkoKTogc3RyaW5nIHwgdW5kZWZpbmVkIHtcbiAgICByZXR1cm4gdGhpcy5oYXNFcnJvcigpID8gdGhpcy5lcnJvcklkIDogdW5kZWZpbmVkO1xuICB9XG5cbiAgZ2V0IGVycm9ycygpOiBzdHJpbmdbXSB7XG4gICAgY29uc3QgeyB2YWxpZGF0aW9uRXJyb3JzIH0gPSB0aGlzLmF1dGhlbnRpY2F0b3I7XG4gICAgcmV0dXJuIGdldEVycm9ycyh2YWxpZGF0aW9uRXJyb3JzW3RoaXMubmFtZV0pO1xuICB9XG5cbiAgcHVibGljIG9uQmx1cigkZXZlbnQ6IEV2ZW50KTogdm9pZCB7XG4gICAgY29uc3QgeyBuYW1lIH0gPSA8SFRNTElucHV0RWxlbWVudD4kZXZlbnQudGFyZ2V0O1xuXG4gICAgdGhpcy5hdXRoZW50aWNhdG9yLnVwZGF0ZUJsdXIoeyBuYW1lIH0pO1xuICB9XG5cbiAgaXNQYXNzd29yZEZpZWxkKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLmZvcm1GaWVsZC50eXBlID09PSAncGFzc3dvcmQnO1xuICB9XG5cbiAgaXNQaG9uZUZpZWxkKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLmZvcm1GaWVsZC50eXBlID09PSAndGVsJztcbiAgfVxuXG4gIGhhc0Vycm9yKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLmVycm9ycz8ubGVuZ3RoID4gMDtcbiAgfVxuXG4gIHRyYW5zbGF0ZShwaHJhc2U6IHN0cmluZyk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRyYW5zbGF0ZTxzdHJpbmc+KHBocmFzZSk7XG4gIH1cbn1cbiIsIjxkaXYgY2xhc3M9XCJhbXBsaWZ5LWZsZXggYW1wbGlmeS1maWVsZCBhbXBsaWZ5LWF1dGhlbnRpY2F0b3JfX2NvbHVtblwiPlxuICA8IS0tIENvdW50cnkgY29kZSBmaWVsZCAtLT5cbiAgPGFtcGxpZnktcGhvbmUtbnVtYmVyLWZpZWxkXG4gICAgKm5nSWY9XCJpc1Bob25lRmllbGQoKVwiXG4gICAgW25hbWVdPVwibmFtZVwiXG4gICAgW2xhYmVsXT1cImZvcm1GaWVsZC5sYWJlbFwiXG4gICAgW2RlZmF1bHRDb3VudHJ5Q29kZV09XCJmb3JtRmllbGQuZGlhbENvZGVcIlxuICAgIFtkaWFsQ29kZUxpc3RdPVwiZm9ybUZpZWxkLmRpYWxDb2RlTGlzdFwiXG4gICAgW3BsYWNlaG9sZGVyXT1cImZvcm1GaWVsZC5wbGFjZWhvbGRlclwiXG4gICAgW3JlcXVpcmVkXT1cImZvcm1GaWVsZC5pc1JlcXVpcmVkXCJcbiAgICBbbGFiZWxIaWRkZW5dPVwiZm9ybUZpZWxkLmxhYmVsSGlkZGVuXCJcbiAgICBbYXV0b2NvbXBsZXRlXT1cImZvcm1GaWVsZC5hdXRvY29tcGxldGVcIlxuICAgIFtoYXNFcnJvcl09XCJoYXNFcnJvclwiXG4gICAgW2Rlc2NyaWJlZEJ5XT1cImFyaWFEZXNjcmliZWRCeVwiXG4gICAgdHlwZT1cInRlbFwiXG4gID48L2FtcGxpZnktcGhvbmUtbnVtYmVyLWZpZWxkPlxuXG4gIDxhbXBsaWZ5LXBhc3N3b3JkLWZpZWxkXG4gICAgKm5nSWY9XCJpc1Bhc3N3b3JkRmllbGQoKVwiXG4gICAgW25hbWVdPVwibmFtZVwiXG4gICAgW2xhYmVsXT1cImZvcm1GaWVsZC5sYWJlbFwiXG4gICAgW3BsYWNlaG9sZGVyXT1cImZvcm1GaWVsZC5wbGFjZWhvbGRlclwiXG4gICAgW3JlcXVpcmVkXT1cImZvcm1GaWVsZC5pc1JlcXVpcmVkXCJcbiAgICBbbGFiZWxIaWRkZW5dPVwiZm9ybUZpZWxkLmxhYmVsSGlkZGVuXCJcbiAgICBbYXV0b2NvbXBsZXRlXT1cImZvcm1GaWVsZC5hdXRvY29tcGxldGVcIlxuICAgIFtoYXNFcnJvcl09XCJoYXNFcnJvclwiXG4gICAgW2Rlc2NyaWJlZEJ5XT1cImFyaWFEZXNjcmliZWRCeVwiXG4gICAgKHNldEJsdXIpPVwib25CbHVyKCRldmVudClcIlxuICA+PC9hbXBsaWZ5LXBhc3N3b3JkLWZpZWxkPlxuXG4gIDxhbXBsaWZ5LXRleHQtZmllbGRcbiAgICAqbmdJZj1cIiFpc1Bhc3N3b3JkRmllbGQoKSAmJiAhaXNQaG9uZUZpZWxkKClcIlxuICAgIFtuYW1lXT1cIm5hbWVcIlxuICAgIFtsYWJlbF09XCJmb3JtRmllbGQubGFiZWxcIlxuICAgIFtwbGFjZWhvbGRlcl09XCJmb3JtRmllbGQucGxhY2Vob2xkZXJcIlxuICAgIFtyZXF1aXJlZF09XCJmb3JtRmllbGQuaXNSZXF1aXJlZFwiXG4gICAgW2xhYmVsSGlkZGVuXT1cImZvcm1GaWVsZC5sYWJlbEhpZGRlblwiXG4gICAgW2F1dG9jb21wbGV0ZV09XCJmb3JtRmllbGQuYXV0b2NvbXBsZXRlXCJcbiAgICBbdHlwZV09XCJmb3JtRmllbGQudHlwZVwiXG4gICAgW2hhc0Vycm9yXT1cImhhc0Vycm9yXCJcbiAgICBbZGVzY3JpYmVkQnldPVwiYXJpYURlc2NyaWJlZEJ5XCJcbiAgPjwvYW1wbGlmeS10ZXh0LWZpZWxkPlxuXG4gIDxkaXYgZGF0YS1hbXBsaWZ5LXNpZ24tdXAtZXJyb3JzICpuZ0lmPVwiaGFzRXJyb3IoKVwiIFtpZF09XCJlcnJvcklkXCI+XG4gICAgPGRpdlxuICAgICAgY2xhc3M9XCJhbXBsaWZ5LXRleHQgYW1wbGlmeS10ZXh0LS1lcnJvclwiXG4gICAgICBkYXRhLXZhcmlhdGlvbj1cImVycm9yXCJcbiAgICAgICpuZ0Zvcj1cImxldCBlcnJvciBvZiBlcnJvcnNcIlxuICAgID5cbiAgICAgIHt7IHRyYW5zbGF0ZShlcnJvcikgfX1cbiAgICA8L2Rpdj5cbiAgPC9kaXY+XG48L2Rpdj5cbiJdfQ==