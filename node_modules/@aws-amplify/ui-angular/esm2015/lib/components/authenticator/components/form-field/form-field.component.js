import { Component, Input } from '@angular/core';
import { translate, countryDialCodes, getErrors, } from '@aws-amplify/ui';
import { nanoid } from 'nanoid';
import * as i0 from "@angular/core";
import * as i1 from "../../../../services/authenticator.service";
import * as i2 from "../../../../primitives/phone-number-field/phone-number-field.component";
import * as i3 from "../../../../primitives/password-field/password-field.component";
import * as i4 from "../../../../primitives/text-field/text-field.component";
import * as i5 from "@angular/common";
export class FormFieldComponent {
    constructor(authenticator) {
        this.authenticator = authenticator;
        this.countryDialCodesValue = countryDialCodes;
        this.errorId = nanoid(12);
    }
    get errors() {
        const { validationErrors } = this.authenticator;
        return getErrors(validationErrors[this.name]);
    }
    onBlur($event) {
        let { name } = $event.target;
        this.authenticator.updateBlur({ name });
    }
    isPasswordField() {
        return this.formField.type === 'password';
    }
    isPhoneField() {
        return this.formField.type === 'tel';
    }
    hasError() {
        var _a;
        return ((_a = this.errors) === null || _a === void 0 ? void 0 : _a.length) > 0;
    }
    get ariaDescribedBy() {
        return this.hasError() ? this.errorId : undefined;
    }
    translate(phrase) {
        return translate(phrase);
    }
}
FormFieldComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FormFieldComponent, deps: [{ token: i1.AuthenticatorService }], target: i0.ɵɵFactoryTarget.Component });
FormFieldComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: FormFieldComponent, selector: "amplify-form-field", inputs: { name: "name", formField: "formField" }, ngImport: i0, template: "<div class=\"amplify-flex amplify-field amplify-authenticator__column\">\n  <!-- Country code field -->\n  <amplify-phone-number-field\n    *ngIf=\"isPhoneField()\"\n    [name]=\"name\"\n    [label]=\"formField.label\"\n    [defaultCountryCode]=\"formField.dialCode\"\n    [dialCodeList]=\"formField.dialCodeList\"\n    [placeholder]=\"formField.placeholder\"\n    [required]=\"formField.isRequired\"\n    [labelHidden]=\"formField.labelHidden\"\n    [autocomplete]=\"formField.autocomplete\"\n    [hasError]=\"hasError\"\n    [describedBy]=\"ariaDescribedBy\"\n    type=\"tel\"\n  ></amplify-phone-number-field>\n\n  <amplify-password-field\n    *ngIf=\"isPasswordField()\"\n    [name]=\"name\"\n    [label]=\"formField.label\"\n    [placeholder]=\"formField.placeholder\"\n    [required]=\"formField.isRequired\"\n    [labelHidden]=\"formField.labelHidden\"\n    [autocomplete]=\"formField.autocomplete\"\n    [hasError]=\"hasError\"\n    [describedBy]=\"ariaDescribedBy\"\n    (setBlur)=\"onBlur($event)\"\n  ></amplify-password-field>\n\n  <amplify-text-field\n    *ngIf=\"!isPasswordField() && !isPhoneField()\"\n    [name]=\"name\"\n    [label]=\"formField.label\"\n    [placeholder]=\"formField.placeholder\"\n    [required]=\"formField.isRequired\"\n    [labelHidden]=\"formField.labelHidden\"\n    [autocomplete]=\"formField.autocomplete\"\n    [type]=\"formField.type\"\n    [hasError]=\"hasError\"\n    [describedBy]=\"ariaDescribedBy\"\n  ></amplify-text-field>\n\n  <div data-amplify-sign-up-errors *ngIf=\"hasError()\" [id]=\"errorId\">\n    <div\n      class=\"amplify-text amplify-text--error\"\n      data-variation=\"error\"\n      *ngFor=\"let error of errors\"\n    >\n      {{ translate(error) }}\n    </div>\n  </div>\n</div>\n", components: [{ type: i2.PhoneNumberFieldComponent, selector: "amplify-phone-number-field", inputs: ["autocomplete", "disabled", "defaultCountryCode", "selectFieldId", "textFieldId", "initialValue", "label", "name", "placeholder", "required", "type", "labelHidden", "dialCodeList", "hasError", "describedBy"] }, { type: i3.PasswordFieldComponent, selector: "amplify-password-field", inputs: ["autocomplete", "disabled", "fieldId", "initialValue", "label", "name", "placeholder", "required", "labelHidden", "hasError", "describedBy"], outputs: ["setBlur"] }, { type: i4.TextFieldComponent, selector: "amplify-text-field", inputs: ["autocomplete", "disabled", "fieldId", "initialValue", "label", "name", "placeholder", "required", "type", "labelHidden", "hasError", "describedBy"] }], directives: [{ type: i5.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i5.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FormFieldComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'amplify-form-field',
                    templateUrl: './form-field.component.html',
                }]
        }], ctorParameters: function () { return [{ type: i1.AuthenticatorService }]; }, propDecorators: { name: [{
                type: Input
            }], formField: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9ybS1maWVsZC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy91aS1hbmd1bGFyL3NyYy9saWIvY29tcG9uZW50cy9hdXRoZW50aWNhdG9yL2NvbXBvbmVudHMvZm9ybS1maWVsZC9mb3JtLWZpZWxkLmNvbXBvbmVudC50cyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL3VpLWFuZ3VsYXIvc3JjL2xpYi9jb21wb25lbnRzL2F1dGhlbnRpY2F0b3IvY29tcG9uZW50cy9mb3JtLWZpZWxkL2Zvcm0tZmllbGQuY29tcG9uZW50Lmh0bWwiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDakQsT0FBTyxFQUNMLFNBQVMsRUFDVCxnQkFBZ0IsRUFFaEIsU0FBUyxHQUNWLE1BQU0saUJBQWlCLENBQUM7QUFDekIsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLFFBQVEsQ0FBQzs7Ozs7OztBQU9oQyxNQUFNLE9BQU8sa0JBQWtCO0lBUTdCLFlBQW9CLGFBQW1DO1FBQW5DLGtCQUFhLEdBQWIsYUFBYSxDQUFzQjtRQUhoRCwwQkFBcUIsR0FBRyxnQkFBZ0IsQ0FBQztRQUN6QyxZQUFPLEdBQUcsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBRThCLENBQUM7SUFFM0QsSUFBSSxNQUFNO1FBQ1IsTUFBTSxFQUFFLGdCQUFnQixFQUFFLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQztRQUNoRCxPQUFPLFNBQVMsQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztJQUNoRCxDQUFDO0lBRU0sTUFBTSxDQUFDLE1BQWE7UUFDekIsSUFBSSxFQUFFLElBQUksRUFBRSxHQUFxQixNQUFNLENBQUMsTUFBTSxDQUFDO1FBRS9DLElBQUksQ0FBQyxhQUFhLENBQUMsVUFBVSxDQUFDLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztJQUMxQyxDQUFDO0lBRUQsZUFBZTtRQUNiLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLEtBQUssVUFBVSxDQUFDO0lBQzVDLENBQUM7SUFFRCxZQUFZO1FBQ1YsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksS0FBSyxLQUFLLENBQUM7SUFDdkMsQ0FBQztJQUVELFFBQVE7O1FBQ04sT0FBTyxDQUFBLE1BQUEsSUFBSSxDQUFDLE1BQU0sMENBQUUsTUFBTSxJQUFHLENBQUMsQ0FBQztJQUNqQyxDQUFDO0lBRUQsSUFBSSxlQUFlO1FBQ2pCLE9BQU8sSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUM7SUFDcEQsQ0FBQztJQUVELFNBQVMsQ0FBQyxNQUFjO1FBQ3RCLE9BQU8sU0FBUyxDQUFTLE1BQU0sQ0FBQyxDQUFDO0lBQ25DLENBQUM7O2dIQXZDVSxrQkFBa0I7b0dBQWxCLGtCQUFrQiw0R0NkL0IsdXREQXFEQTs0RkR2Q2Esa0JBQWtCO2tCQUo5QixTQUFTO21CQUFDO29CQUNULFFBQVEsRUFBRSxvQkFBb0I7b0JBQzlCLFdBQVcsRUFBRSw2QkFBNkI7aUJBQzNDOzJHQUVVLElBQUk7c0JBQVosS0FBSztnQkFDRyxTQUFTO3NCQUFqQixLQUFLIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBJbnB1dCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtcbiAgdHJhbnNsYXRlLFxuICBjb3VudHJ5RGlhbENvZGVzLFxuICBGb3JtRmllbGRPcHRpb25zLFxuICBnZXRFcnJvcnMsXG59IGZyb20gJ0Bhd3MtYW1wbGlmeS91aSc7XG5pbXBvcnQgeyBuYW5vaWQgfSBmcm9tICduYW5vaWQnO1xuaW1wb3J0IHsgQXV0aGVudGljYXRvclNlcnZpY2UgfSBmcm9tICcuLi8uLi8uLi8uLi9zZXJ2aWNlcy9hdXRoZW50aWNhdG9yLnNlcnZpY2UnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdhbXBsaWZ5LWZvcm0tZmllbGQnLFxuICB0ZW1wbGF0ZVVybDogJy4vZm9ybS1maWVsZC5jb21wb25lbnQuaHRtbCcsXG59KVxuZXhwb3J0IGNsYXNzIEZvcm1GaWVsZENvbXBvbmVudCB7XG4gIEBJbnB1dCgpIG5hbWU6IHN0cmluZzsgLy8gbmFtZSBvZiB0aGUgaW5wdXQgZmllbGRcbiAgQElucHV0KCkgZm9ybUZpZWxkOiBGb3JtRmllbGRPcHRpb25zOyAvLyBmb3JtIGZpZWxkIG9wdGlvbnMgZm9yIHRoaXMgZmllbGRcblxuICBwdWJsaWMgZGVmYXVsdENvdW50cnlDb2RlVmFsdWU6IHN0cmluZztcbiAgcHVibGljIGNvdW50cnlEaWFsQ29kZXNWYWx1ZSA9IGNvdW50cnlEaWFsQ29kZXM7XG4gIHB1YmxpYyBlcnJvcklkID0gbmFub2lkKDEyKTtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGF1dGhlbnRpY2F0b3I6IEF1dGhlbnRpY2F0b3JTZXJ2aWNlKSB7fVxuXG4gIGdldCBlcnJvcnMoKTogc3RyaW5nW10ge1xuICAgIGNvbnN0IHsgdmFsaWRhdGlvbkVycm9ycyB9ID0gdGhpcy5hdXRoZW50aWNhdG9yO1xuICAgIHJldHVybiBnZXRFcnJvcnModmFsaWRhdGlvbkVycm9yc1t0aGlzLm5hbWVdKTtcbiAgfVxuXG4gIHB1YmxpYyBvbkJsdXIoJGV2ZW50OiBFdmVudCkge1xuICAgIGxldCB7IG5hbWUgfSA9IDxIVE1MSW5wdXRFbGVtZW50PiRldmVudC50YXJnZXQ7XG5cbiAgICB0aGlzLmF1dGhlbnRpY2F0b3IudXBkYXRlQmx1cih7IG5hbWUgfSk7XG4gIH1cblxuICBpc1Bhc3N3b3JkRmllbGQoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuZm9ybUZpZWxkLnR5cGUgPT09ICdwYXNzd29yZCc7XG4gIH1cblxuICBpc1Bob25lRmllbGQoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuZm9ybUZpZWxkLnR5cGUgPT09ICd0ZWwnO1xuICB9XG5cbiAgaGFzRXJyb3IoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuZXJyb3JzPy5sZW5ndGggPiAwO1xuICB9XG5cbiAgZ2V0IGFyaWFEZXNjcmliZWRCeSgpIHtcbiAgICByZXR1cm4gdGhpcy5oYXNFcnJvcigpID8gdGhpcy5lcnJvcklkIDogdW5kZWZpbmVkO1xuICB9XG5cbiAgdHJhbnNsYXRlKHBocmFzZTogc3RyaW5nKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdHJhbnNsYXRlPHN0cmluZz4ocGhyYXNlKTtcbiAgfVxufVxuIiwiPGRpdiBjbGFzcz1cImFtcGxpZnktZmxleCBhbXBsaWZ5LWZpZWxkIGFtcGxpZnktYXV0aGVudGljYXRvcl9fY29sdW1uXCI+XG4gIDwhLS0gQ291bnRyeSBjb2RlIGZpZWxkIC0tPlxuICA8YW1wbGlmeS1waG9uZS1udW1iZXItZmllbGRcbiAgICAqbmdJZj1cImlzUGhvbmVGaWVsZCgpXCJcbiAgICBbbmFtZV09XCJuYW1lXCJcbiAgICBbbGFiZWxdPVwiZm9ybUZpZWxkLmxhYmVsXCJcbiAgICBbZGVmYXVsdENvdW50cnlDb2RlXT1cImZvcm1GaWVsZC5kaWFsQ29kZVwiXG4gICAgW2RpYWxDb2RlTGlzdF09XCJmb3JtRmllbGQuZGlhbENvZGVMaXN0XCJcbiAgICBbcGxhY2Vob2xkZXJdPVwiZm9ybUZpZWxkLnBsYWNlaG9sZGVyXCJcbiAgICBbcmVxdWlyZWRdPVwiZm9ybUZpZWxkLmlzUmVxdWlyZWRcIlxuICAgIFtsYWJlbEhpZGRlbl09XCJmb3JtRmllbGQubGFiZWxIaWRkZW5cIlxuICAgIFthdXRvY29tcGxldGVdPVwiZm9ybUZpZWxkLmF1dG9jb21wbGV0ZVwiXG4gICAgW2hhc0Vycm9yXT1cImhhc0Vycm9yXCJcbiAgICBbZGVzY3JpYmVkQnldPVwiYXJpYURlc2NyaWJlZEJ5XCJcbiAgICB0eXBlPVwidGVsXCJcbiAgPjwvYW1wbGlmeS1waG9uZS1udW1iZXItZmllbGQ+XG5cbiAgPGFtcGxpZnktcGFzc3dvcmQtZmllbGRcbiAgICAqbmdJZj1cImlzUGFzc3dvcmRGaWVsZCgpXCJcbiAgICBbbmFtZV09XCJuYW1lXCJcbiAgICBbbGFiZWxdPVwiZm9ybUZpZWxkLmxhYmVsXCJcbiAgICBbcGxhY2Vob2xkZXJdPVwiZm9ybUZpZWxkLnBsYWNlaG9sZGVyXCJcbiAgICBbcmVxdWlyZWRdPVwiZm9ybUZpZWxkLmlzUmVxdWlyZWRcIlxuICAgIFtsYWJlbEhpZGRlbl09XCJmb3JtRmllbGQubGFiZWxIaWRkZW5cIlxuICAgIFthdXRvY29tcGxldGVdPVwiZm9ybUZpZWxkLmF1dG9jb21wbGV0ZVwiXG4gICAgW2hhc0Vycm9yXT1cImhhc0Vycm9yXCJcbiAgICBbZGVzY3JpYmVkQnldPVwiYXJpYURlc2NyaWJlZEJ5XCJcbiAgICAoc2V0Qmx1cik9XCJvbkJsdXIoJGV2ZW50KVwiXG4gID48L2FtcGxpZnktcGFzc3dvcmQtZmllbGQ+XG5cbiAgPGFtcGxpZnktdGV4dC1maWVsZFxuICAgICpuZ0lmPVwiIWlzUGFzc3dvcmRGaWVsZCgpICYmICFpc1Bob25lRmllbGQoKVwiXG4gICAgW25hbWVdPVwibmFtZVwiXG4gICAgW2xhYmVsXT1cImZvcm1GaWVsZC5sYWJlbFwiXG4gICAgW3BsYWNlaG9sZGVyXT1cImZvcm1GaWVsZC5wbGFjZWhvbGRlclwiXG4gICAgW3JlcXVpcmVkXT1cImZvcm1GaWVsZC5pc1JlcXVpcmVkXCJcbiAgICBbbGFiZWxIaWRkZW5dPVwiZm9ybUZpZWxkLmxhYmVsSGlkZGVuXCJcbiAgICBbYXV0b2NvbXBsZXRlXT1cImZvcm1GaWVsZC5hdXRvY29tcGxldGVcIlxuICAgIFt0eXBlXT1cImZvcm1GaWVsZC50eXBlXCJcbiAgICBbaGFzRXJyb3JdPVwiaGFzRXJyb3JcIlxuICAgIFtkZXNjcmliZWRCeV09XCJhcmlhRGVzY3JpYmVkQnlcIlxuICA+PC9hbXBsaWZ5LXRleHQtZmllbGQ+XG5cbiAgPGRpdiBkYXRhLWFtcGxpZnktc2lnbi11cC1lcnJvcnMgKm5nSWY9XCJoYXNFcnJvcigpXCIgW2lkXT1cImVycm9ySWRcIj5cbiAgICA8ZGl2XG4gICAgICBjbGFzcz1cImFtcGxpZnktdGV4dCBhbXBsaWZ5LXRleHQtLWVycm9yXCJcbiAgICAgIGRhdGEtdmFyaWF0aW9uPVwiZXJyb3JcIlxuICAgICAgKm5nRm9yPVwibGV0IGVycm9yIG9mIGVycm9yc1wiXG4gICAgPlxuICAgICAge3sgdHJhbnNsYXRlKGVycm9yKSB9fVxuICAgIDwvZGl2PlxuICA8L2Rpdj5cbjwvZGl2PlxuIl19