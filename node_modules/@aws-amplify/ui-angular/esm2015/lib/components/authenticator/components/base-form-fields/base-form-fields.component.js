import { Component, HostBinding, Input } from '@angular/core';
import { getSortedFormFields, } from '@aws-amplify/ui';
import * as i0 from "@angular/core";
import * as i1 from "../../../../services/authenticator.service";
import * as i2 from "../form-field/form-field.component";
import * as i3 from "@angular/common";
/**
 * Sorts the given formFields, then renders them in order.
 */
export class BaseFormFieldsComponent {
    constructor(authenticator) {
        this.authenticator = authenticator;
        this.display = 'contents';
        this.formFields = [];
    }
    ngOnInit() {
        const state = this.authenticator.authState;
        this.formFields = getSortedFormFields(this.route, state);
    }
}
BaseFormFieldsComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: BaseFormFieldsComponent, deps: [{ token: i1.AuthenticatorService }], target: i0.ɵɵFactoryTarget.Component });
BaseFormFieldsComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: BaseFormFieldsComponent, selector: "amplify-base-form-fields", inputs: { route: "route" }, host: { properties: { "style.display": "this.display" } }, ngImport: i0, template: "<ng-container *ngFor=\"let formField of formFields\">\n  <amplify-form-field\n    [name]=\"formField[0]\"\n    [formField]=\"formField[1]\"\n  ></amplify-form-field>\n</ng-container>\n", components: [{ type: i2.FormFieldComponent, selector: "amplify-form-field", inputs: ["name", "formField"] }], directives: [{ type: i3.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: BaseFormFieldsComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'amplify-base-form-fields',
                    templateUrl: './base-form-fields.component.html',
                }]
        }], ctorParameters: function () { return [{ type: i1.AuthenticatorService }]; }, propDecorators: { route: [{
                type: Input
            }], display: [{
                type: HostBinding,
                args: ['style.display']
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFzZS1mb3JtLWZpZWxkcy5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy91aS1hbmd1bGFyL3NyYy9saWIvY29tcG9uZW50cy9hdXRoZW50aWNhdG9yL2NvbXBvbmVudHMvYmFzZS1mb3JtLWZpZWxkcy9iYXNlLWZvcm0tZmllbGRzLmNvbXBvbmVudC50cyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL3VpLWFuZ3VsYXIvc3JjL2xpYi9jb21wb25lbnRzL2F1dGhlbnRpY2F0b3IvY29tcG9uZW50cy9iYXNlLWZvcm0tZmllbGRzL2Jhc2UtZm9ybS1maWVsZHMuY29tcG9uZW50Lmh0bWwiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxXQUFXLEVBQUUsS0FBSyxFQUFVLE1BQU0sZUFBZSxDQUFDO0FBQ3RFLE9BQU8sRUFHTCxtQkFBbUIsR0FDcEIsTUFBTSxpQkFBaUIsQ0FBQzs7Ozs7QUFHekI7O0dBRUc7QUFLSCxNQUFNLE9BQU8sdUJBQXVCO0lBS2xDLFlBQW9CLGFBQW1DO1FBQW5DLGtCQUFhLEdBQWIsYUFBYSxDQUFzQjtRQUh6QixZQUFPLEdBQUcsVUFBVSxDQUFDO1FBQzVDLGVBQVUsR0FBb0IsRUFBRSxDQUFDO0lBRWtCLENBQUM7SUFFM0QsUUFBUTtRQUNOLE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxhQUFhLENBQUMsU0FBUyxDQUFDO1FBQzNDLElBQUksQ0FBQyxVQUFVLEdBQUcsbUJBQW1CLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxLQUFLLENBQUMsQ0FBQztJQUMzRCxDQUFDOztxSEFWVSx1QkFBdUI7eUdBQXZCLHVCQUF1Qix1SkNmcEMsMExBTUE7NEZEU2EsdUJBQXVCO2tCQUpuQyxTQUFTO21CQUFDO29CQUNULFFBQVEsRUFBRSwwQkFBMEI7b0JBQ3BDLFdBQVcsRUFBRSxtQ0FBbUM7aUJBQ2pEOzJHQUVVLEtBQUs7c0JBQWIsS0FBSztnQkFDd0IsT0FBTztzQkFBcEMsV0FBVzt1QkFBQyxlQUFlIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBIb3N0QmluZGluZywgSW5wdXQsIE9uSW5pdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtcbiAgRm9ybUZpZWxkQ29tcG9uZW50cyxcbiAgRm9ybUZpZWxkc0FycmF5LFxuICBnZXRTb3J0ZWRGb3JtRmllbGRzLFxufSBmcm9tICdAYXdzLWFtcGxpZnkvdWknO1xuaW1wb3J0IHsgQXV0aGVudGljYXRvclNlcnZpY2UgfSBmcm9tICcuLi8uLi8uLi8uLi9zZXJ2aWNlcy9hdXRoZW50aWNhdG9yLnNlcnZpY2UnO1xuXG4vKipcbiAqIFNvcnRzIHRoZSBnaXZlbiBmb3JtRmllbGRzLCB0aGVuIHJlbmRlcnMgdGhlbSBpbiBvcmRlci5cbiAqL1xuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnYW1wbGlmeS1iYXNlLWZvcm0tZmllbGRzJyxcbiAgdGVtcGxhdGVVcmw6ICcuL2Jhc2UtZm9ybS1maWVsZHMuY29tcG9uZW50Lmh0bWwnLFxufSlcbmV4cG9ydCBjbGFzcyBCYXNlRm9ybUZpZWxkc0NvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCB7XG4gIEBJbnB1dCgpIHJvdXRlOiBGb3JtRmllbGRDb21wb25lbnRzOyAvLyBmb3JtRmllbGRzIHRvIHNvcnQgYW5kIHJlbmRlclxuICBASG9zdEJpbmRpbmcoJ3N0eWxlLmRpc3BsYXknKSBkaXNwbGF5ID0gJ2NvbnRlbnRzJztcbiAgcHVibGljIGZvcm1GaWVsZHM6IEZvcm1GaWVsZHNBcnJheSA9IFtdO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgYXV0aGVudGljYXRvcjogQXV0aGVudGljYXRvclNlcnZpY2UpIHt9XG5cbiAgbmdPbkluaXQoKTogdm9pZCB7XG4gICAgY29uc3Qgc3RhdGUgPSB0aGlzLmF1dGhlbnRpY2F0b3IuYXV0aFN0YXRlO1xuICAgIHRoaXMuZm9ybUZpZWxkcyA9IGdldFNvcnRlZEZvcm1GaWVsZHModGhpcy5yb3V0ZSwgc3RhdGUpO1xuICB9XG59XG4iLCI8bmctY29udGFpbmVyICpuZ0Zvcj1cImxldCBmb3JtRmllbGQgb2YgZm9ybUZpZWxkc1wiPlxuICA8YW1wbGlmeS1mb3JtLWZpZWxkXG4gICAgW25hbWVdPVwiZm9ybUZpZWxkWzBdXCJcbiAgICBbZm9ybUZpZWxkXT1cImZvcm1GaWVsZFsxXVwiXG4gID48L2FtcGxpZnktZm9ybS1maWVsZD5cbjwvbmctY29udGFpbmVyPlxuIl19