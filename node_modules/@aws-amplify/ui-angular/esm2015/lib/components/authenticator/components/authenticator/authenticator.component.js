import { __awaiter } from "tslib";
import { Component, ContentChildren, Input, ViewEncapsulation, } from '@angular/core';
import { authenticatorTextUtil, configureComponent, defaultAuthHubHandler, listenToAuthHub, } from '@aws-amplify/ui';
import { AmplifySlotDirective } from '../../../../utilities/amplify-slot/amplify-slot.directive';
import { CustomComponentsService } from '../../../../services/custom-components.service';
import { VERSION } from '../../../../../version';
import * as i0 from "@angular/core";
import * as i1 from "../../../../services/authenticator.service";
import * as i2 from "../../../../services/custom-components.service";
import * as i3 from "../../../../utilities/amplify-slot/amplify-slot.component";
import * as i4 from "../../../../primitives/tabs/tabs.component";
import * as i5 from "../../../../primitives/tab-item/tab-item.component";
import * as i6 from "../sign-in/sign-in.component";
import * as i7 from "../sign-up/sign-up.component";
import * as i8 from "../confirm-sign-up/confirm-sign-up.component";
import * as i9 from "../confirm-sign-in/confirm-sign-in.component";
import * as i10 from "../setup-totp/setup-totp.component";
import * as i11 from "../force-new-password/force-new-password.component";
import * as i12 from "../reset-password/reset-password.component";
import * as i13 from "../confirm-reset-password/amplify-confirm-reset-password.component";
import * as i14 from "../verify-user/verify-user.component";
import * as i15 from "../confirm-verify-user/amplify-confirm-verify-user.component";
import * as i16 from "@angular/common";
const { getSignInTabText, getSignUpTabText } = authenticatorTextUtil;
export class AuthenticatorComponent {
    constructor(authenticator, contextService, changeDetector) {
        this.authenticator = authenticator;
        this.contextService = contextService;
        this.changeDetector = changeDetector;
        this.customComponentQuery = null;
        // translated texts
        this.signInTitle = getSignInTabText();
        this.signUpTitle = getSignUpTabText();
        this.hasInitialized = false;
        this.isHandlingHubEvent = false;
    }
    ngOnInit() {
        const { initialState, loginMechanisms, services, signUpAttributes, socialProviders, formFields, } = this;
        configureComponent({
            packageName: '@aws-amplify/ui-angular',
            version: VERSION,
        });
        const { authService, initializeMachine } = this.authenticator;
        this.unsubscribeHub = listenToAuthHub(authService, (data, service) => __awaiter(this, void 0, void 0, function* () {
            yield defaultAuthHubHandler(data, service);
            /**
             * Hub events aren't properly caught by Angular, because they are
             * synchronous events. Angular tracks async network events and
             * html events, but not synchronous events like hub.
             *
             * On any notable hub events, we run change detection manually.
             */
            this.changeDetector.detectChanges();
            /**
             * Hub events that we handle can lead to multiple state changes:
             * e.g. `authenticated` -> `signOut` -> initialState.
             *
             * We want to ensure change detection runs all the way, until
             * we reach back to the initial state. Setting the below flag
             * to true to until we reach initial state.
             */
            this.isHandlingHubEvent = true;
        }));
        /**
         * Subscribes to state machine changes and sends INIT event
         * once machine reaches 'setup' state.
         */
        this.unsubscribeMachine = this.authenticator.subscribe(() => {
            const { route } = this.authenticator;
            if (this.isHandlingHubEvent) {
                this.changeDetector.detectChanges();
                const initialStateWithDefault = initialState !== null && initialState !== void 0 ? initialState : 'signIn';
                // We can stop manual change detection if we're back to the initial state
                if (route === initialStateWithDefault) {
                    this.isHandlingHubEvent = false;
                }
            }
            if (!this.hasInitialized && route === 'setup') {
                initializeMachine({
                    initialState,
                    loginMechanisms,
                    services,
                    signUpAttributes,
                    socialProviders,
                    formFields,
                });
                this.hasInitialized = true;
            }
        }).unsubscribe;
        /**
         * handling translations after content init, because authenticator and its
         * translations might be initialized before the main app's `ngOnInit` is run.
         */
        this.signInTitle = getSignInTabText();
        this.signUpTitle = getSignUpTabText();
    }
    /**
     * Lifecycle Methods
     */
    ngAfterContentInit() {
        this.contextService.customComponents = this.mapCustomComponents(this.customComponentQuery);
    }
    ngOnDestroy() {
        if (this.unsubscribeMachine)
            this.unsubscribeMachine();
        if (this.unsubscribeHub)
            this.unsubscribeHub();
    }
    /**
     * Class Functions
     */
    // context passed to "authenticated" slot
    get context() {
        return this.authenticator.slotContext;
    }
    get route() {
        return this.authenticator.route;
    }
    onTabChange() {
        const route = this.authenticator.route;
        if (route === 'signIn') {
            this.authenticator.toSignUp();
        }
        else {
            this.authenticator.toSignIn();
        }
    }
    hasTabs() {
        const { route } = this.authenticator;
        return route === 'signIn' || route === 'signUp';
    }
    hasRouteComponent() {
        const { route } = this.authenticator;
        switch (route) {
            case 'authenticated':
            case 'idle':
            case 'setup':
            case 'signOut':
            case 'transition':
                return false;
            default:
                return true;
        }
    }
    mapCustomComponents(componentQuery) {
        if (!componentQuery)
            return {};
        const customComponents = {};
        componentQuery.forEach((component) => {
            customComponents[component.name] = component.template;
        });
        return customComponents;
    }
}
AuthenticatorComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AuthenticatorComponent, deps: [{ token: i1.AuthenticatorService }, { token: i2.CustomComponentsService }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component });
AuthenticatorComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: AuthenticatorComponent, selector: "amplify-authenticator", inputs: { formFields: "formFields", initialState: "initialState", loginMechanisms: "loginMechanisms", services: "services", signUpAttributes: "signUpAttributes", socialProviders: "socialProviders", variation: "variation", hideSignUp: "hideSignUp" }, providers: [CustomComponentsService], queries: [{ propertyName: "customComponentQuery", predicate: AmplifySlotDirective }], ngImport: i0, template: "<div\n  data-amplify-authenticator\n  [attr.data-variation]=\"variation\"\n  *ngIf=\"hasRouteComponent()\"\n>\n  <div data-amplify-container>\n    <amplify-slot name=\"header\" [context]=\"context\"></amplify-slot>\n    <div\n      data-amplify-router\n      [attr.data-amplify-router-content]=\"hasTabs() ? undefined : ''\"\n    >\n      <amplify-tabs\n        (tabChange)=\"onTabChange()\"\n        *ngIf=\"(route === 'signIn' || route === 'signUp') && !hideSignUp\"\n      >\n        <amplify-tab-item\n          [title]=\"signInTitle\"\n          [active]=\"route === 'signIn'\"\n          data-amplify-router-content\n        >\n          <!-- signIn component -->\n          <amplify-slot\n            name=\"sign-in\"\n            [context]=\"context\"\n            *ngIf=\"route === 'signIn'\"\n          >\n            <amplify-sign-in></amplify-sign-in>\n          </amplify-slot>\n        </amplify-tab-item>\n        <amplify-tab-item\n          [title]=\"signUpTitle\"\n          [active]=\"route === 'signUp'\"\n          data-amplify-router-content\n        >\n          <!-- signUp component -->\n          <amplify-slot\n            name=\"sign-up\"\n            [context]=\"context\"\n            *ngIf=\"route === 'signUp'\"\n          >\n            <amplify-sign-up></amplify-sign-up>\n          </amplify-slot>\n        </amplify-tab-item>\n      </amplify-tabs>\n\n      <amplify-slot\n        name=\"sign-in\"\n        [context]=\"context\"\n        *ngIf=\"route === 'signIn' && hideSignUp\"\n      >\n        <amplify-sign-in></amplify-sign-in>\n      </amplify-slot>\n\n      <!-- confirmSignUp content -->\n      <amplify-slot\n        name=\"confirm-sign-up\"\n        [context]=\"context\"\n        *ngIf=\"route === 'confirmSignUp'\"\n      >\n        <amplify-confirm-sign-up></amplify-confirm-sign-up>\n      </amplify-slot>\n\n      <!-- confirmSignIn content -->\n      <amplify-slot\n        name=\"confirm-sign-in\"\n        [context]=\"context\"\n        *ngIf=\"route === 'confirmSignIn'\"\n      >\n        <amplify-confirm-sign-in></amplify-confirm-sign-in>\n      </amplify-slot>\n\n      <!-- setupTotp content -->\n      <amplify-slot\n        name=\"setup-totp\"\n        [context]=\"context\"\n        *ngIf=\"route === 'setupTOTP'\"\n      >\n        <amplify-setup-totp></amplify-setup-totp>\n      </amplify-slot>\n\n      <!-- forceNewPassword content -->\n      <amplify-slot\n        name=\"force-new-password\"\n        [context]=\"context\"\n        *ngIf=\"route === 'forceNewPassword'\"\n      >\n        <amplify-force-new-password></amplify-force-new-password>\n      </amplify-slot>\n\n      <!-- resetPassword content -->\n      <amplify-slot\n        name=\"reset-password\"\n        [context]=\"context\"\n        *ngIf=\"route === 'resetPassword'\"\n      >\n        <amplify-reset-password></amplify-reset-password>\n      </amplify-slot>\n\n      <!-- confirmResetPassword content -->\n      <amplify-slot\n        name=\"confirm-reset-password\"\n        [context]=\"context\"\n        *ngIf=\"route === 'confirmResetPassword'\"\n      >\n        <amplify-confirm-reset-password></amplify-confirm-reset-password>\n      </amplify-slot>\n\n      <!-- verifyUser content -->\n      <amplify-slot\n        name=\"verify-user\"\n        [context]=\"context\"\n        *ngIf=\"route === 'verifyUser'\"\n      >\n        <amplify-verify-user></amplify-verify-user>\n      </amplify-slot>\n\n      <!-- confirmVerifyUser content -->\n      <amplify-slot\n        name=\"confirm-verify-user\"\n        [context]=\"context\"\n        *ngIf=\"route === 'confirmVerifyUser'\"\n      >\n        <amplify-confirm-verify-user></amplify-confirm-verify-user>\n      </amplify-slot>\n    </div>\n\n    <amplify-slot name=\"footer\" [context]=\"context\"></amplify-slot>\n  </div>\n</div>\n\n<!-- signedIn content is rendered outside authenticator so it's not styled by authenticator -->\n<amplify-slot\n  name=\"authenticated\"\n  [context]=\"context\"\n  *ngIf=\"route === 'authenticated'\"\n>\n  <ng-content></ng-content>\n</amplify-slot>\n", components: [{ type: i3.AmplifySlotComponent, selector: "amplify-slot", inputs: ["name", "context"] }, { type: i4.TabsComponent, selector: "amplify-tabs", outputs: ["tabChange"] }, { type: i5.TabItemComponent, selector: "amplify-tab-item", inputs: ["title", "active", "id", "labelledById", "tabIndex"] }, { type: i6.SignInComponent, selector: "amplify-sign-in" }, { type: i7.SignUpComponent, selector: "amplify-sign-up" }, { type: i8.ConfirmSignUpComponent, selector: "amplify-confirm-sign-up" }, { type: i9.ConfirmSignInComponent, selector: "amplify-confirm-sign-in" }, { type: i10.SetupTotpComponent, selector: "amplify-setup-totp" }, { type: i11.ForceNewPasswordComponent, selector: "amplify-force-new-password", inputs: ["headerText"] }, { type: i12.ResetPasswordComponent, selector: "amplify-reset-password", inputs: ["headerText"] }, { type: i13.ConfirmResetPasswordComponent, selector: "amplify-confirm-reset-password", inputs: ["headerText"] }, { type: i14.VerifyUserComponent, selector: "amplify-verify-user", inputs: ["headerText"] }, { type: i15.ConfirmVerifyUserComponent, selector: "amplify-confirm-verify-user", inputs: ["headerText"] }], directives: [{ type: i16.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], encapsulation: i0.ViewEncapsulation.None });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AuthenticatorComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'amplify-authenticator',
                    templateUrl: './authenticator.component.html',
                    providers: [CustomComponentsService],
                    encapsulation: ViewEncapsulation.None,
                }]
        }], ctorParameters: function () { return [{ type: i1.AuthenticatorService }, { type: i2.CustomComponentsService }, { type: i0.ChangeDetectorRef }]; }, propDecorators: { formFields: [{
                type: Input
            }], initialState: [{
                type: Input
            }], loginMechanisms: [{
                type: Input
            }], services: [{
                type: Input
            }], signUpAttributes: [{
                type: Input
            }], socialProviders: [{
                type: Input
            }], variation: [{
                type: Input
            }], hideSignUp: [{
                type: Input
            }], customComponentQuery: [{
                type: ContentChildren,
                args: [AmplifySlotDirective]
            }] } });
//# sourceMappingURL=data:application/json;base64,