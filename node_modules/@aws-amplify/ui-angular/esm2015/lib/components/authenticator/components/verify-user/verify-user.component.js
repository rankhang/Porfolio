import { Component, HostBinding, Input, ViewEncapsulation, } from '@angular/core';
import { getActorState, getFormDataFromEvent, translate, authenticatorTextUtil, } from '@aws-amplify/ui';
import { getAttributeMap } from '../../../../common';
import { nanoid } from 'nanoid';
import * as i0 from "@angular/core";
import * as i1 from "../../../../services/authenticator.service";
import * as i2 from "../../../../utilities/amplify-slot/amplify-slot.component";
import * as i3 from "../../../../primitives/button/button.component";
import * as i4 from "../../../../primitives/error/error.component";
import * as i5 from "@angular/common";
const { getSkipText, getVerifyText, getAccountRecoveryInfoText } = authenticatorTextUtil;
export class VerifyUserComponent {
    constructor(authenticator) {
        this.authenticator = authenticator;
        this.dataAttr = '';
        this.headerText = getAccountRecoveryInfoText();
        this.unverifiedContactMethods = {};
        this.labelId = nanoid(12);
        // translated texts
        this.skipText = getSkipText();
        this.verifyText = getVerifyText();
    }
    ngOnInit() {
        const actorState = getActorState(this.authenticator.authState);
        this.unverifiedContactMethods = actorState.context.unverifiedContactMethods;
    }
    get context() {
        return this.authenticator.slotContext;
    }
    getLabelForAttr(authAttr) {
        var _a;
        const attributeMap = getAttributeMap();
        const label = (_a = attributeMap[authAttr]) === null || _a === void 0 ? void 0 : _a.label;
        return translate(label);
    }
    onInput(event) {
        event.preventDefault();
        const { name, value } = event.target;
        this.authenticator.updateForm({ name, value });
    }
    onSubmit(event) {
        event.preventDefault();
        this.authenticator.submitForm(getFormDataFromEvent(event));
    }
}
VerifyUserComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: VerifyUserComponent, deps: [{ token: i1.AuthenticatorService }], target: i0.ɵɵFactoryTarget.Component });
VerifyUserComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: VerifyUserComponent, selector: "amplify-verify-user", inputs: { headerText: "headerText" }, host: { properties: { "attr.data-amplify-authenticator-verifyuser": "this.dataAttr" } }, ngImport: i0, template: "<form data-amplify-form (input)=\"onInput($event)\" (submit)=\"onSubmit($event)\">\n  <fieldset\n    class=\"amplify-flex amplify-authenticator__column\"\n    data-amplify-fieldset\n    [disabled]=\"authenticator.isPending\"\n  >\n    <amplify-slot name=\"verify-user-header\" [context]=\"context\">\n      <h3 class=\"amplify-heading amplify-heading--3\">{{ this.headerText }}</h3>\n    </amplify-slot>\n\n    <div\n      *ngFor=\"\n        let unverifiedContactMethod of unverifiedContactMethods | keyvalue\n      \"\n    >\n      <input\n        name=\"unverifiedAttr\"\n        type=\"radio\"\n        [value]=\"unverifiedContactMethod.key\"\n        [id]=\"labelId\"\n      />\n      <label [for]=\"labelId\">{{\n        getLabelForAttr(unverifiedContactMethod.key)\n      }}</label>\n    </div>\n\n    <button\n      amplify-button\n      variation=\"primary\"\n      fullWidth=\"true\"\n      type=\"submit\"\n      [isDisabled]=\"authenticator.isPending\"\n    >\n      {{ verifyText }}\n    </button>\n\n    <button\n      amplify-button\n      size=\"small\"\n      variation=\"link\"\n      fontWeight=\"normal\"\n      fullWidth=\"true\"\n      (click)=\"authenticator.skipVerification()\"\n    >\n      {{ skipText }}\n    </button>\n\n    <amplify-error *ngIf=\"authenticator.error\">\n      {{ authenticator.error }}\n    </amplify-error>\n  </fieldset>\n  <amplify-slot name=\"verify-user-footer\" [context]=\"context\"> </amplify-slot>\n</form>\n", components: [{ type: i2.AmplifySlotComponent, selector: "amplify-slot", inputs: ["name", "context"] }, { type: i3.ButtonComponent, selector: "button[amplify-button]", inputs: ["type", "fullWidth", "isDisabled", "size", "variation", "fontWeight"] }, { type: i4.ErrorComponent, selector: "amplify-error" }], directives: [{ type: i5.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i5.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], pipes: { "keyvalue": i5.KeyValuePipe }, encapsulation: i0.ViewEncapsulation.None });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: VerifyUserComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'amplify-verify-user',
                    templateUrl: './verify-user.component.html',
                    encapsulation: ViewEncapsulation.None,
                }]
        }], ctorParameters: function () { return [{ type: i1.AuthenticatorService }]; }, propDecorators: { dataAttr: [{
                type: HostBinding,
                args: ['attr.data-amplify-authenticator-verifyuser']
            }], headerText: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmVyaWZ5LXVzZXIuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvdWktYW5ndWxhci9zcmMvbGliL2NvbXBvbmVudHMvYXV0aGVudGljYXRvci9jb21wb25lbnRzL3ZlcmlmeS11c2VyL3ZlcmlmeS11c2VyLmNvbXBvbmVudC50cyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL3VpLWFuZ3VsYXIvc3JjL2xpYi9jb21wb25lbnRzL2F1dGhlbnRpY2F0b3IvY29tcG9uZW50cy92ZXJpZnktdXNlci92ZXJpZnktdXNlci5jb21wb25lbnQuaHRtbCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQ0wsU0FBUyxFQUNULFdBQVcsRUFDWCxLQUFLLEVBRUwsaUJBQWlCLEdBQ2xCLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFDTCxhQUFhLEVBQ2Isb0JBQW9CLEVBRXBCLFNBQVMsRUFDVCxxQkFBcUIsR0FDdEIsTUFBTSxpQkFBaUIsQ0FBQztBQUV6QixPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFDckQsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLFFBQVEsQ0FBQzs7Ozs7OztBQUVoQyxNQUFNLEVBQUUsV0FBVyxFQUFFLGFBQWEsRUFBRSwwQkFBMEIsRUFBRSxHQUM5RCxxQkFBcUIsQ0FBQztBQU14QixNQUFNLE9BQU8sbUJBQW1CO0lBVzlCLFlBQW1CLGFBQW1DO1FBQW5DLGtCQUFhLEdBQWIsYUFBYSxDQUFzQjtRQVZLLGFBQVEsR0FBRyxFQUFFLENBQUM7UUFDekQsZUFBVSxHQUFHLDBCQUEwQixFQUFFLENBQUM7UUFFbkQsNkJBQXdCLEdBQUcsRUFBRSxDQUFDO1FBQzlCLFlBQU8sR0FBRyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUM7UUFFNUIsbUJBQW1CO1FBQ1osYUFBUSxHQUFHLFdBQVcsRUFBRSxDQUFDO1FBQ3pCLGVBQVUsR0FBRyxhQUFhLEVBQUUsQ0FBQztJQUVxQixDQUFDO0lBRTFELFFBQVE7UUFDTixNQUFNLFVBQVUsR0FBRyxhQUFhLENBQzlCLElBQUksQ0FBQyxhQUFhLENBQUMsU0FBUyxDQUNkLENBQUM7UUFDakIsSUFBSSxDQUFDLHdCQUF3QixHQUFHLFVBQVUsQ0FBQyxPQUFPLENBQUMsd0JBQXdCLENBQUM7SUFDOUUsQ0FBQztJQUVELElBQVcsT0FBTztRQUNoQixPQUFPLElBQUksQ0FBQyxhQUFhLENBQUMsV0FBVyxDQUFDO0lBQ3hDLENBQUM7SUFFRCxlQUFlLENBQUMsUUFBZ0I7O1FBQzlCLE1BQU0sWUFBWSxHQUFHLGVBQWUsRUFBRSxDQUFDO1FBQ3ZDLE1BQU0sS0FBSyxHQUFHLE1BQUEsWUFBWSxDQUFDLFFBQVEsQ0FBQywwQ0FBRSxLQUFLLENBQUM7UUFDNUMsT0FBTyxTQUFTLENBQVMsS0FBSyxDQUFDLENBQUM7SUFDbEMsQ0FBQztJQUVELE9BQU8sQ0FBQyxLQUFZO1FBQ2xCLEtBQUssQ0FBQyxjQUFjLEVBQUUsQ0FBQztRQUN2QixNQUFNLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRSxHQUFxQixLQUFLLENBQUMsTUFBTSxDQUFDO1FBQ3ZELElBQUksQ0FBQyxhQUFhLENBQUMsVUFBVSxDQUFDLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRSxDQUFDLENBQUM7SUFDakQsQ0FBQztJQUVELFFBQVEsQ0FBQyxLQUFZO1FBQ25CLEtBQUssQ0FBQyxjQUFjLEVBQUUsQ0FBQztRQUN2QixJQUFJLENBQUMsYUFBYSxDQUFDLFVBQVUsQ0FBQyxvQkFBb0IsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO0lBQzdELENBQUM7O2lIQXZDVSxtQkFBbUI7cUdBQW5CLG1CQUFtQiwwTEN6QmhDLHk3Q0FxREE7NEZENUJhLG1CQUFtQjtrQkFML0IsU0FBUzttQkFBQztvQkFDVCxRQUFRLEVBQUUscUJBQXFCO29CQUMvQixXQUFXLEVBQUUsOEJBQThCO29CQUMzQyxhQUFhLEVBQUUsaUJBQWlCLENBQUMsSUFBSTtpQkFDdEM7MkdBRTRELFFBQVE7c0JBQWxFLFdBQVc7dUJBQUMsNENBQTRDO2dCQUN6QyxVQUFVO3NCQUF6QixLQUFLIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgQ29tcG9uZW50LFxuICBIb3N0QmluZGluZyxcbiAgSW5wdXQsXG4gIE9uSW5pdCxcbiAgVmlld0VuY2Fwc3VsYXRpb24sXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtcbiAgZ2V0QWN0b3JTdGF0ZSxcbiAgZ2V0Rm9ybURhdGFGcm9tRXZlbnQsXG4gIFNpZ25JblN0YXRlLFxuICB0cmFuc2xhdGUsXG4gIGF1dGhlbnRpY2F0b3JUZXh0VXRpbCxcbn0gZnJvbSAnQGF3cy1hbXBsaWZ5L3VpJztcbmltcG9ydCB7IEF1dGhlbnRpY2F0b3JTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vLi4vLi4vc2VydmljZXMvYXV0aGVudGljYXRvci5zZXJ2aWNlJztcbmltcG9ydCB7IGdldEF0dHJpYnV0ZU1hcCB9IGZyb20gJy4uLy4uLy4uLy4uL2NvbW1vbic7XG5pbXBvcnQgeyBuYW5vaWQgfSBmcm9tICduYW5vaWQnO1xuXG5jb25zdCB7IGdldFNraXBUZXh0LCBnZXRWZXJpZnlUZXh0LCBnZXRBY2NvdW50UmVjb3ZlcnlJbmZvVGV4dCB9ID1cbiAgYXV0aGVudGljYXRvclRleHRVdGlsO1xuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnYW1wbGlmeS12ZXJpZnktdXNlcicsXG4gIHRlbXBsYXRlVXJsOiAnLi92ZXJpZnktdXNlci5jb21wb25lbnQuaHRtbCcsXG4gIGVuY2Fwc3VsYXRpb246IFZpZXdFbmNhcHN1bGF0aW9uLk5vbmUsXG59KVxuZXhwb3J0IGNsYXNzIFZlcmlmeVVzZXJDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQge1xuICBASG9zdEJpbmRpbmcoJ2F0dHIuZGF0YS1hbXBsaWZ5LWF1dGhlbnRpY2F0b3ItdmVyaWZ5dXNlcicpIGRhdGFBdHRyID0gJyc7XG4gIEBJbnB1dCgpIHB1YmxpYyBoZWFkZXJUZXh0ID0gZ2V0QWNjb3VudFJlY292ZXJ5SW5mb1RleHQoKTtcblxuICBwdWJsaWMgdW52ZXJpZmllZENvbnRhY3RNZXRob2RzID0ge307XG4gIHB1YmxpYyBsYWJlbElkID0gbmFub2lkKDEyKTtcblxuICAvLyB0cmFuc2xhdGVkIHRleHRzXG4gIHB1YmxpYyBza2lwVGV4dCA9IGdldFNraXBUZXh0KCk7XG4gIHB1YmxpYyB2ZXJpZnlUZXh0ID0gZ2V0VmVyaWZ5VGV4dCgpO1xuXG4gIGNvbnN0cnVjdG9yKHB1YmxpYyBhdXRoZW50aWNhdG9yOiBBdXRoZW50aWNhdG9yU2VydmljZSkge31cblxuICBuZ09uSW5pdCgpOiB2b2lkIHtcbiAgICBjb25zdCBhY3RvclN0YXRlID0gZ2V0QWN0b3JTdGF0ZShcbiAgICAgIHRoaXMuYXV0aGVudGljYXRvci5hdXRoU3RhdGVcbiAgICApIGFzIFNpZ25JblN0YXRlO1xuICAgIHRoaXMudW52ZXJpZmllZENvbnRhY3RNZXRob2RzID0gYWN0b3JTdGF0ZS5jb250ZXh0LnVudmVyaWZpZWRDb250YWN0TWV0aG9kcztcbiAgfVxuXG4gIHB1YmxpYyBnZXQgY29udGV4dCgpIHtcbiAgICByZXR1cm4gdGhpcy5hdXRoZW50aWNhdG9yLnNsb3RDb250ZXh0O1xuICB9XG5cbiAgZ2V0TGFiZWxGb3JBdHRyKGF1dGhBdHRyOiBzdHJpbmcpOiBzdHJpbmcge1xuICAgIGNvbnN0IGF0dHJpYnV0ZU1hcCA9IGdldEF0dHJpYnV0ZU1hcCgpO1xuICAgIGNvbnN0IGxhYmVsID0gYXR0cmlidXRlTWFwW2F1dGhBdHRyXT8ubGFiZWw7XG4gICAgcmV0dXJuIHRyYW5zbGF0ZTxzdHJpbmc+KGxhYmVsKTtcbiAgfVxuXG4gIG9uSW5wdXQoZXZlbnQ6IEV2ZW50KSB7XG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICBjb25zdCB7IG5hbWUsIHZhbHVlIH0gPSA8SFRNTElucHV0RWxlbWVudD5ldmVudC50YXJnZXQ7XG4gICAgdGhpcy5hdXRoZW50aWNhdG9yLnVwZGF0ZUZvcm0oeyBuYW1lLCB2YWx1ZSB9KTtcbiAgfVxuXG4gIG9uU3VibWl0KGV2ZW50OiBFdmVudCk6IHZvaWQge1xuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgdGhpcy5hdXRoZW50aWNhdG9yLnN1Ym1pdEZvcm0oZ2V0Rm9ybURhdGFGcm9tRXZlbnQoZXZlbnQpKTtcbiAgfVxufVxuIiwiPGZvcm0gZGF0YS1hbXBsaWZ5LWZvcm0gKGlucHV0KT1cIm9uSW5wdXQoJGV2ZW50KVwiIChzdWJtaXQpPVwib25TdWJtaXQoJGV2ZW50KVwiPlxuICA8ZmllbGRzZXRcbiAgICBjbGFzcz1cImFtcGxpZnktZmxleCBhbXBsaWZ5LWF1dGhlbnRpY2F0b3JfX2NvbHVtblwiXG4gICAgZGF0YS1hbXBsaWZ5LWZpZWxkc2V0XG4gICAgW2Rpc2FibGVkXT1cImF1dGhlbnRpY2F0b3IuaXNQZW5kaW5nXCJcbiAgPlxuICAgIDxhbXBsaWZ5LXNsb3QgbmFtZT1cInZlcmlmeS11c2VyLWhlYWRlclwiIFtjb250ZXh0XT1cImNvbnRleHRcIj5cbiAgICAgIDxoMyBjbGFzcz1cImFtcGxpZnktaGVhZGluZyBhbXBsaWZ5LWhlYWRpbmctLTNcIj57eyB0aGlzLmhlYWRlclRleHQgfX08L2gzPlxuICAgIDwvYW1wbGlmeS1zbG90PlxuXG4gICAgPGRpdlxuICAgICAgKm5nRm9yPVwiXG4gICAgICAgIGxldCB1bnZlcmlmaWVkQ29udGFjdE1ldGhvZCBvZiB1bnZlcmlmaWVkQ29udGFjdE1ldGhvZHMgfCBrZXl2YWx1ZVxuICAgICAgXCJcbiAgICA+XG4gICAgICA8aW5wdXRcbiAgICAgICAgbmFtZT1cInVudmVyaWZpZWRBdHRyXCJcbiAgICAgICAgdHlwZT1cInJhZGlvXCJcbiAgICAgICAgW3ZhbHVlXT1cInVudmVyaWZpZWRDb250YWN0TWV0aG9kLmtleVwiXG4gICAgICAgIFtpZF09XCJsYWJlbElkXCJcbiAgICAgIC8+XG4gICAgICA8bGFiZWwgW2Zvcl09XCJsYWJlbElkXCI+e3tcbiAgICAgICAgZ2V0TGFiZWxGb3JBdHRyKHVudmVyaWZpZWRDb250YWN0TWV0aG9kLmtleSlcbiAgICAgIH19PC9sYWJlbD5cbiAgICA8L2Rpdj5cblxuICAgIDxidXR0b25cbiAgICAgIGFtcGxpZnktYnV0dG9uXG4gICAgICB2YXJpYXRpb249XCJwcmltYXJ5XCJcbiAgICAgIGZ1bGxXaWR0aD1cInRydWVcIlxuICAgICAgdHlwZT1cInN1Ym1pdFwiXG4gICAgICBbaXNEaXNhYmxlZF09XCJhdXRoZW50aWNhdG9yLmlzUGVuZGluZ1wiXG4gICAgPlxuICAgICAge3sgdmVyaWZ5VGV4dCB9fVxuICAgIDwvYnV0dG9uPlxuXG4gICAgPGJ1dHRvblxuICAgICAgYW1wbGlmeS1idXR0b25cbiAgICAgIHNpemU9XCJzbWFsbFwiXG4gICAgICB2YXJpYXRpb249XCJsaW5rXCJcbiAgICAgIGZvbnRXZWlnaHQ9XCJub3JtYWxcIlxuICAgICAgZnVsbFdpZHRoPVwidHJ1ZVwiXG4gICAgICAoY2xpY2spPVwiYXV0aGVudGljYXRvci5za2lwVmVyaWZpY2F0aW9uKClcIlxuICAgID5cbiAgICAgIHt7IHNraXBUZXh0IH19XG4gICAgPC9idXR0b24+XG5cbiAgICA8YW1wbGlmeS1lcnJvciAqbmdJZj1cImF1dGhlbnRpY2F0b3IuZXJyb3JcIj5cbiAgICAgIHt7IGF1dGhlbnRpY2F0b3IuZXJyb3IgfX1cbiAgICA8L2FtcGxpZnktZXJyb3I+XG4gIDwvZmllbGRzZXQ+XG4gIDxhbXBsaWZ5LXNsb3QgbmFtZT1cInZlcmlmeS11c2VyLWZvb3RlclwiIFtjb250ZXh0XT1cImNvbnRleHRcIj4gPC9hbXBsaWZ5LXNsb3Q+XG48L2Zvcm0+XG4iXX0=