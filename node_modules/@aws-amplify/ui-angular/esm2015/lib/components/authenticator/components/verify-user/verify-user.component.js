import { Component, HostBinding, Input, ViewEncapsulation, } from '@angular/core';
import { getActorState, getFormDataFromEvent, translate, authenticatorTextUtil, } from '@aws-amplify/ui';
import { getAttributeMap } from '../../../../common';
import { nanoid } from 'nanoid';
import * as i0 from "@angular/core";
import * as i1 from "../../../../services/authenticator.service";
import * as i2 from "../../../../utilities/amplify-slot/amplify-slot.component";
import * as i3 from "../../../../primitives/button/button.component";
import * as i4 from "../../../../primitives/error/error.component";
import * as i5 from "@angular/common";
const { getSkipText, getVerifyText, getAccountRecoveryInfoText } = authenticatorTextUtil;
export class VerifyUserComponent {
    constructor(authenticator) {
        this.authenticator = authenticator;
        this.dataAttr = '';
        this.headerText = getAccountRecoveryInfoText();
        this.unverifiedContactMethods = {};
        this.labelId = nanoid(12);
        // translated texts
        this.skipText = getSkipText();
        this.verifyText = getVerifyText();
    }
    get context() {
        return this.authenticator.slotContext;
    }
    ngOnInit() {
        const actorState = getActorState(this.authenticator.authState);
        this.unverifiedContactMethods = actorState.context.unverifiedContactMethods;
    }
    getLabel(attr) {
        const attributeMap = getAttributeMap();
        const { label } = attributeMap[attr];
        return translate(label);
    }
    onInput(event) {
        event.preventDefault();
        const { name, value } = event.target;
        this.authenticator.updateForm({ name, value });
    }
    onSubmit(event) {
        event.preventDefault();
        this.authenticator.submitForm(getFormDataFromEvent(event));
    }
}
VerifyUserComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: VerifyUserComponent, deps: [{ token: i1.AuthenticatorService }], target: i0.ɵɵFactoryTarget.Component });
VerifyUserComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: VerifyUserComponent, selector: "amplify-verify-user", inputs: { headerText: "headerText" }, host: { properties: { "attr.data-amplify-authenticator-verifyuser": "this.dataAttr" } }, ngImport: i0, template: "<form data-amplify-form (input)=\"onInput($event)\" (submit)=\"onSubmit($event)\">\n  <fieldset\n    class=\"amplify-flex amplify-authenticator__column\"\n    data-amplify-fieldset\n    [disabled]=\"authenticator.isPending\"\n  >\n    <amplify-slot name=\"verify-user-header\" [context]=\"context\">\n      <h3 class=\"amplify-heading amplify-heading--3\">{{ this.headerText }}</h3>\n    </amplify-slot>\n\n    <div\n      *ngFor=\"\n        let unverifiedContactMethod of unverifiedContactMethods | keyvalue\n      \"\n    >\n      <input\n        name=\"unverifiedAttr\"\n        type=\"radio\"\n        [value]=\"unverifiedContactMethod.key\"\n        [id]=\"labelId\"\n      />\n      <label [for]=\"labelId\">{{ getLabel(unverifiedContactMethod.key) }}</label>\n    </div>\n\n    <button\n      amplify-button\n      variation=\"primary\"\n      fullWidth=\"true\"\n      type=\"submit\"\n      [isDisabled]=\"authenticator.isPending\"\n    >\n      {{ verifyText }}\n    </button>\n\n    <button\n      amplify-button\n      size=\"small\"\n      variation=\"link\"\n      fontWeight=\"normal\"\n      fullWidth=\"true\"\n      (click)=\"authenticator.skipVerification()\"\n    >\n      {{ skipText }}\n    </button>\n\n    <amplify-error *ngIf=\"authenticator.error\">\n      {{ authenticator.error }}\n    </amplify-error>\n  </fieldset>\n  <amplify-slot name=\"verify-user-footer\" [context]=\"context\"> </amplify-slot>\n</form>\n", components: [{ type: i2.AmplifySlotComponent, selector: "amplify-slot", inputs: ["name", "context"] }, { type: i3.ButtonComponent, selector: "button[amplify-button]", inputs: ["type", "fullWidth", "isDisabled", "size", "variation", "fontWeight"] }, { type: i4.ErrorComponent, selector: "amplify-error" }], directives: [{ type: i5.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i5.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], pipes: { "keyvalue": i5.KeyValuePipe }, encapsulation: i0.ViewEncapsulation.None });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: VerifyUserComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'amplify-verify-user',
                    templateUrl: './verify-user.component.html',
                    encapsulation: ViewEncapsulation.None,
                }]
        }], ctorParameters: function () { return [{ type: i1.AuthenticatorService }]; }, propDecorators: { dataAttr: [{
                type: HostBinding,
                args: ['attr.data-amplify-authenticator-verifyuser']
            }], headerText: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmVyaWZ5LXVzZXIuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvdWktYW5ndWxhci9zcmMvbGliL2NvbXBvbmVudHMvYXV0aGVudGljYXRvci9jb21wb25lbnRzL3ZlcmlmeS11c2VyL3ZlcmlmeS11c2VyLmNvbXBvbmVudC50cyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL3VpLWFuZ3VsYXIvc3JjL2xpYi9jb21wb25lbnRzL2F1dGhlbnRpY2F0b3IvY29tcG9uZW50cy92ZXJpZnktdXNlci92ZXJpZnktdXNlci5jb21wb25lbnQuaHRtbCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQ0wsU0FBUyxFQUNULFdBQVcsRUFDWCxLQUFLLEVBRUwsaUJBQWlCLEdBQ2xCLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFDTCxhQUFhLEVBQ2Isb0JBQW9CLEVBRXBCLFNBQVMsRUFDVCxxQkFBcUIsR0FFdEIsTUFBTSxpQkFBaUIsQ0FBQztBQUV6QixPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFDckQsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLFFBQVEsQ0FBQzs7Ozs7OztBQUVoQyxNQUFNLEVBQUUsV0FBVyxFQUFFLGFBQWEsRUFBRSwwQkFBMEIsRUFBRSxHQUM5RCxxQkFBcUIsQ0FBQztBQU14QixNQUFNLE9BQU8sbUJBQW1CO0lBVzlCLFlBQW1CLGFBQW1DO1FBQW5DLGtCQUFhLEdBQWIsYUFBYSxDQUFzQjtRQVZLLGFBQVEsR0FBRyxFQUFFLENBQUM7UUFDekQsZUFBVSxHQUFHLDBCQUEwQixFQUFFLENBQUM7UUFFbkQsNkJBQXdCLEdBQUcsRUFBRSxDQUFDO1FBQzlCLFlBQU8sR0FBRyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUM7UUFFNUIsbUJBQW1CO1FBQ1osYUFBUSxHQUFHLFdBQVcsRUFBRSxDQUFDO1FBQ3pCLGVBQVUsR0FBRyxhQUFhLEVBQUUsQ0FBQztJQUVxQixDQUFDO0lBRTFELElBQVcsT0FBTztRQUNoQixPQUFPLElBQUksQ0FBQyxhQUFhLENBQUMsV0FBVyxDQUFDO0lBQ3hDLENBQUM7SUFFRCxRQUFRO1FBQ04sTUFBTSxVQUFVLEdBQUcsYUFBYSxDQUM5QixJQUFJLENBQUMsYUFBYSxDQUFDLFNBQVMsQ0FDZCxDQUFDO1FBQ2pCLElBQUksQ0FBQyx3QkFBd0IsR0FBRyxVQUFVLENBQUMsT0FBTyxDQUFDLHdCQUF3QixDQUFDO0lBQzlFLENBQUM7SUFFRCxRQUFRLENBQUMsSUFBb0M7UUFDM0MsTUFBTSxZQUFZLEdBQUcsZUFBZSxFQUFFLENBQUM7UUFDdkMsTUFBTSxFQUFFLEtBQUssRUFBRSxHQUFHLFlBQVksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNyQyxPQUFPLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUMxQixDQUFDO0lBRUQsT0FBTyxDQUFDLEtBQVk7UUFDbEIsS0FBSyxDQUFDLGNBQWMsRUFBRSxDQUFDO1FBQ3ZCLE1BQU0sRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLEdBQXFCLEtBQUssQ0FBQyxNQUFNLENBQUM7UUFDdkQsSUFBSSxDQUFDLGFBQWEsQ0FBQyxVQUFVLENBQUMsRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQztJQUNqRCxDQUFDO0lBRUQsUUFBUSxDQUFDLEtBQVk7UUFDbkIsS0FBSyxDQUFDLGNBQWMsRUFBRSxDQUFDO1FBQ3ZCLElBQUksQ0FBQyxhQUFhLENBQUMsVUFBVSxDQUFDLG9CQUFvQixDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7SUFDN0QsQ0FBQzs7aUhBdkNVLG1CQUFtQjtxR0FBbkIsbUJBQW1CLDBMQzFCaEMsazZDQW1EQTs0RkR6QmEsbUJBQW1CO2tCQUwvQixTQUFTO21CQUFDO29CQUNULFFBQVEsRUFBRSxxQkFBcUI7b0JBQy9CLFdBQVcsRUFBRSw4QkFBOEI7b0JBQzNDLGFBQWEsRUFBRSxpQkFBaUIsQ0FBQyxJQUFJO2lCQUN0QzsyR0FFNEQsUUFBUTtzQkFBbEUsV0FBVzt1QkFBQyw0Q0FBNEM7Z0JBQ3pDLFVBQVU7c0JBQXpCLEtBQUsiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBDb21wb25lbnQsXG4gIEhvc3RCaW5kaW5nLFxuICBJbnB1dCxcbiAgT25Jbml0LFxuICBWaWV3RW5jYXBzdWxhdGlvbixcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge1xuICBnZXRBY3RvclN0YXRlLFxuICBnZXRGb3JtRGF0YUZyb21FdmVudCxcbiAgU2lnbkluU3RhdGUsXG4gIHRyYW5zbGF0ZSxcbiAgYXV0aGVudGljYXRvclRleHRVdGlsLFxuICBVbnZlcmlmaWVkQ29udGFjdE1ldGhvZHMsXG59IGZyb20gJ0Bhd3MtYW1wbGlmeS91aSc7XG5pbXBvcnQgeyBBdXRoZW50aWNhdG9yU2VydmljZSB9IGZyb20gJy4uLy4uLy4uLy4uL3NlcnZpY2VzL2F1dGhlbnRpY2F0b3Iuc2VydmljZSc7XG5pbXBvcnQgeyBnZXRBdHRyaWJ1dGVNYXAgfSBmcm9tICcuLi8uLi8uLi8uLi9jb21tb24nO1xuaW1wb3J0IHsgbmFub2lkIH0gZnJvbSAnbmFub2lkJztcblxuY29uc3QgeyBnZXRTa2lwVGV4dCwgZ2V0VmVyaWZ5VGV4dCwgZ2V0QWNjb3VudFJlY292ZXJ5SW5mb1RleHQgfSA9XG4gIGF1dGhlbnRpY2F0b3JUZXh0VXRpbDtcbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2FtcGxpZnktdmVyaWZ5LXVzZXInLFxuICB0ZW1wbGF0ZVVybDogJy4vdmVyaWZ5LXVzZXIuY29tcG9uZW50Lmh0bWwnLFxuICBlbmNhcHN1bGF0aW9uOiBWaWV3RW5jYXBzdWxhdGlvbi5Ob25lLFxufSlcbmV4cG9ydCBjbGFzcyBWZXJpZnlVc2VyQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0IHtcbiAgQEhvc3RCaW5kaW5nKCdhdHRyLmRhdGEtYW1wbGlmeS1hdXRoZW50aWNhdG9yLXZlcmlmeXVzZXInKSBkYXRhQXR0ciA9ICcnO1xuICBASW5wdXQoKSBwdWJsaWMgaGVhZGVyVGV4dCA9IGdldEFjY291bnRSZWNvdmVyeUluZm9UZXh0KCk7XG5cbiAgcHVibGljIHVudmVyaWZpZWRDb250YWN0TWV0aG9kcyA9IHt9O1xuICBwdWJsaWMgbGFiZWxJZCA9IG5hbm9pZCgxMik7XG5cbiAgLy8gdHJhbnNsYXRlZCB0ZXh0c1xuICBwdWJsaWMgc2tpcFRleHQgPSBnZXRTa2lwVGV4dCgpO1xuICBwdWJsaWMgdmVyaWZ5VGV4dCA9IGdldFZlcmlmeVRleHQoKTtcblxuICBjb25zdHJ1Y3RvcihwdWJsaWMgYXV0aGVudGljYXRvcjogQXV0aGVudGljYXRvclNlcnZpY2UpIHt9XG5cbiAgcHVibGljIGdldCBjb250ZXh0KCk6IEF1dGhlbnRpY2F0b3JTZXJ2aWNlWydzbG90Q29udGV4dCddIHtcbiAgICByZXR1cm4gdGhpcy5hdXRoZW50aWNhdG9yLnNsb3RDb250ZXh0O1xuICB9XG5cbiAgbmdPbkluaXQoKTogdm9pZCB7XG4gICAgY29uc3QgYWN0b3JTdGF0ZSA9IGdldEFjdG9yU3RhdGUoXG4gICAgICB0aGlzLmF1dGhlbnRpY2F0b3IuYXV0aFN0YXRlXG4gICAgKSBhcyBTaWduSW5TdGF0ZTtcbiAgICB0aGlzLnVudmVyaWZpZWRDb250YWN0TWV0aG9kcyA9IGFjdG9yU3RhdGUuY29udGV4dC51bnZlcmlmaWVkQ29udGFjdE1ldGhvZHM7XG4gIH1cblxuICBnZXRMYWJlbChhdHRyOiBrZXlvZiBVbnZlcmlmaWVkQ29udGFjdE1ldGhvZHMpOiBzdHJpbmcge1xuICAgIGNvbnN0IGF0dHJpYnV0ZU1hcCA9IGdldEF0dHJpYnV0ZU1hcCgpO1xuICAgIGNvbnN0IHsgbGFiZWwgfSA9IGF0dHJpYnV0ZU1hcFthdHRyXTtcbiAgICByZXR1cm4gdHJhbnNsYXRlKGxhYmVsKTtcbiAgfVxuXG4gIG9uSW5wdXQoZXZlbnQ6IEV2ZW50KTogdm9pZCB7XG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICBjb25zdCB7IG5hbWUsIHZhbHVlIH0gPSA8SFRNTElucHV0RWxlbWVudD5ldmVudC50YXJnZXQ7XG4gICAgdGhpcy5hdXRoZW50aWNhdG9yLnVwZGF0ZUZvcm0oeyBuYW1lLCB2YWx1ZSB9KTtcbiAgfVxuXG4gIG9uU3VibWl0KGV2ZW50OiBFdmVudCk6IHZvaWQge1xuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgdGhpcy5hdXRoZW50aWNhdG9yLnN1Ym1pdEZvcm0oZ2V0Rm9ybURhdGFGcm9tRXZlbnQoZXZlbnQpKTtcbiAgfVxufVxuIiwiPGZvcm0gZGF0YS1hbXBsaWZ5LWZvcm0gKGlucHV0KT1cIm9uSW5wdXQoJGV2ZW50KVwiIChzdWJtaXQpPVwib25TdWJtaXQoJGV2ZW50KVwiPlxuICA8ZmllbGRzZXRcbiAgICBjbGFzcz1cImFtcGxpZnktZmxleCBhbXBsaWZ5LWF1dGhlbnRpY2F0b3JfX2NvbHVtblwiXG4gICAgZGF0YS1hbXBsaWZ5LWZpZWxkc2V0XG4gICAgW2Rpc2FibGVkXT1cImF1dGhlbnRpY2F0b3IuaXNQZW5kaW5nXCJcbiAgPlxuICAgIDxhbXBsaWZ5LXNsb3QgbmFtZT1cInZlcmlmeS11c2VyLWhlYWRlclwiIFtjb250ZXh0XT1cImNvbnRleHRcIj5cbiAgICAgIDxoMyBjbGFzcz1cImFtcGxpZnktaGVhZGluZyBhbXBsaWZ5LWhlYWRpbmctLTNcIj57eyB0aGlzLmhlYWRlclRleHQgfX08L2gzPlxuICAgIDwvYW1wbGlmeS1zbG90PlxuXG4gICAgPGRpdlxuICAgICAgKm5nRm9yPVwiXG4gICAgICAgIGxldCB1bnZlcmlmaWVkQ29udGFjdE1ldGhvZCBvZiB1bnZlcmlmaWVkQ29udGFjdE1ldGhvZHMgfCBrZXl2YWx1ZVxuICAgICAgXCJcbiAgICA+XG4gICAgICA8aW5wdXRcbiAgICAgICAgbmFtZT1cInVudmVyaWZpZWRBdHRyXCJcbiAgICAgICAgdHlwZT1cInJhZGlvXCJcbiAgICAgICAgW3ZhbHVlXT1cInVudmVyaWZpZWRDb250YWN0TWV0aG9kLmtleVwiXG4gICAgICAgIFtpZF09XCJsYWJlbElkXCJcbiAgICAgIC8+XG4gICAgICA8bGFiZWwgW2Zvcl09XCJsYWJlbElkXCI+e3sgZ2V0TGFiZWwodW52ZXJpZmllZENvbnRhY3RNZXRob2Qua2V5KSB9fTwvbGFiZWw+XG4gICAgPC9kaXY+XG5cbiAgICA8YnV0dG9uXG4gICAgICBhbXBsaWZ5LWJ1dHRvblxuICAgICAgdmFyaWF0aW9uPVwicHJpbWFyeVwiXG4gICAgICBmdWxsV2lkdGg9XCJ0cnVlXCJcbiAgICAgIHR5cGU9XCJzdWJtaXRcIlxuICAgICAgW2lzRGlzYWJsZWRdPVwiYXV0aGVudGljYXRvci5pc1BlbmRpbmdcIlxuICAgID5cbiAgICAgIHt7IHZlcmlmeVRleHQgfX1cbiAgICA8L2J1dHRvbj5cblxuICAgIDxidXR0b25cbiAgICAgIGFtcGxpZnktYnV0dG9uXG4gICAgICBzaXplPVwic21hbGxcIlxuICAgICAgdmFyaWF0aW9uPVwibGlua1wiXG4gICAgICBmb250V2VpZ2h0PVwibm9ybWFsXCJcbiAgICAgIGZ1bGxXaWR0aD1cInRydWVcIlxuICAgICAgKGNsaWNrKT1cImF1dGhlbnRpY2F0b3Iuc2tpcFZlcmlmaWNhdGlvbigpXCJcbiAgICA+XG4gICAgICB7eyBza2lwVGV4dCB9fVxuICAgIDwvYnV0dG9uPlxuXG4gICAgPGFtcGxpZnktZXJyb3IgKm5nSWY9XCJhdXRoZW50aWNhdG9yLmVycm9yXCI+XG4gICAgICB7eyBhdXRoZW50aWNhdG9yLmVycm9yIH19XG4gICAgPC9hbXBsaWZ5LWVycm9yPlxuICA8L2ZpZWxkc2V0PlxuICA8YW1wbGlmeS1zbG90IG5hbWU9XCJ2ZXJpZnktdXNlci1mb290ZXJcIiBbY29udGV4dF09XCJjb250ZXh0XCI+IDwvYW1wbGlmeS1zbG90PlxuPC9mb3JtPlxuIl19