import { OnDestroy } from '@angular/core';
import { AuthContext, AuthEvent, AuthInterpreter, AuthMachineState } from '@aws-amplify/ui';
import { Event, Subscription } from 'xstate';
import { AuthSubscriptionCallback } from '../common';
import * as i0 from "@angular/core";
/**
 * AuthenticatorService provides access to the authenticator state and context.
 */
export declare class AuthenticatorService implements OnDestroy {
    private _authState;
    private _authService;
    private _machineSubscription;
    private _facade;
    constructor();
    ngOnDestroy(): void;
    /**
     * Context facades
     */
    get error(): string;
    get hasValidationErrors(): boolean;
    get isPending(): boolean;
    get route(): import("@aws-amplify/ui").AuthenticatorRoute;
    get authStatus(): "authenticated" | "configuring" | "unauthenticated";
    get user(): import("@aws-amplify/ui").AmplifyUser;
    get validationErrors(): import("@aws-amplify/ui").ValidationError;
    get codeDeliveryDetails(): import("@aws-amplify/ui").CodeDeliveryDetails;
    get totpSecretCode(): string;
    /**
     * Service facades
     */
    get initializeMachine(): (data?: import("@aws-amplify/ui").AuthEventData) => void;
    get updateForm(): (data?: import("@aws-amplify/ui").AuthEventData) => void;
    get updateBlur(): (data?: import("@aws-amplify/ui").AuthEventData) => void;
    get resendCode(): (data?: import("@aws-amplify/ui").AuthEventData) => void;
    get signOut(): (data?: import("@aws-amplify/ui").AuthEventData) => void;
    get submitForm(): (data?: import("@aws-amplify/ui").AuthEventData) => void;
    /**
     * Transition facades
     */
    get toFederatedSignIn(): (data?: import("@aws-amplify/ui").AuthEventData) => void;
    get toResetPassword(): (data?: import("@aws-amplify/ui").AuthEventData) => void;
    get toSignIn(): (data?: import("@aws-amplify/ui").AuthEventData) => void;
    get toSignUp(): (data?: import("@aws-amplify/ui").AuthEventData) => void;
    get skipVerification(): (data?: import("@aws-amplify/ui").AuthEventData) => void;
    /**
     * Internal utility functions
     */
    /** @deprecated For internal use only */
    get authState(): AuthMachineState;
    /** @deprecated For internal use only */
    get authService(): AuthInterpreter;
    /** @deprecated For internal use only */
    get context(): AuthContext;
    /** @deprecated For internal use only */
    get slotContext(): {
        $implicit: import("@aws-amplify/ui").AuthenticatorServiceFacade;
        signOut: (data?: import("@aws-amplify/ui").AuthEventData) => void;
        initializeMachine: (data?: import("@aws-amplify/ui").AuthEventData) => void;
        resendCode: (data?: import("@aws-amplify/ui").AuthEventData) => void;
        submitForm: (data?: import("@aws-amplify/ui").AuthEventData) => void;
        updateForm: (data?: import("@aws-amplify/ui").AuthEventData) => void;
        updateBlur: (data?: import("@aws-amplify/ui").AuthEventData) => void;
        toFederatedSignIn: (data?: import("@aws-amplify/ui").AuthEventData) => void;
        toResetPassword: (data?: import("@aws-amplify/ui").AuthEventData) => void;
        toSignIn: (data?: import("@aws-amplify/ui").AuthEventData) => void;
        toSignUp: (data?: import("@aws-amplify/ui").AuthEventData) => void;
        skipVerification: (data?: import("@aws-amplify/ui").AuthEventData) => void;
        authStatus: "authenticated" | "configuring" | "unauthenticated";
        codeDeliveryDetails: import("@aws-amplify/ui").CodeDeliveryDetails;
        error: string;
        hasValidationErrors: boolean;
        isPending: boolean;
        route: import("@aws-amplify/ui").AuthenticatorRoute;
        socialProviders: import("@aws-amplify/ui").SocialProvider[];
        totpSecretCode: string;
        unverifiedContactMethods: import("@aws-amplify/ui").UnverifiedContactMethods;
        user: import("@aws-amplify/ui").AmplifyUser;
        validationErrors: import("@aws-amplify/ui").ValidationError;
    };
    subscribe(callback: AuthSubscriptionCallback): Subscription;
    /** @deprecated For internal use only */
    send(event: Event<AuthEvent>): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<AuthenticatorService, never>;
    static ɵprov: i0.ɵɵInjectableDeclaration<AuthenticatorService>;
}
