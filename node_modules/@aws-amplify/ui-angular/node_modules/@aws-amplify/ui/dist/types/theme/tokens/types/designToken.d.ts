import { Properties } from 'csstype';
/**
 * a DesignToken can be either an object with a `value` key of `ValueType` or the `ValueType` itself
 */
export declare type DesignToken<ValueType = unknown> = {
    value: ValueType;
} | ValueType;
/**
 * A fully setup design token ready to be used in web platform.
 */
export declare type WebDesignToken<ValueType = unknown> = {
    /**
     * Name of the design token
     */
    name: string;
    /**
     * Object path of the design token. Used for constructing the name
     */
    path: Array<string>;
    /**
     * Original (unresolved, untransformed) value of the design token
     */
    original: ValueType;
    /**
     * The wrapped CSS variable name of this design token, for example
     * `var(--amplify-colors-font-primary)`
     */
    toString(): string;
    /**
     * Token `ValueType`
     */
    value: ValueType;
};
export declare type AnimationDurationValue = string;
export declare type AnimationTimingFunctionValue = string;
export declare type AlignItemsValue = string;
export declare type AlignContentValue = string;
export declare type BackgroundColorValue = ColorValue;
export declare type BorderColorValue = ColorValue;
export declare type BorderCollapseValue = string;
export declare type BorderRadiusValue = RadiusValue;
export declare type BorderStyleValue = string;
export declare type BorderWidthValue<Platform extends PlatformKey = unknown, Output extends OutputVariantKey = unknown> = Output extends 'required' ? Platform extends 'react-native' ? number : SpaceValue : SpaceValue;
export declare type BorderValue = string;
export declare type BoxSizingValue = string;
export declare type BoxShadowValue = ShadowValue;
export declare type CaptionSideValue = string;
export declare type ColorValue = string;
export declare type CursorValue = string;
export declare type DisplayValue = string;
export declare type FlexDirectionValue = string;
export declare type FlexValue = string;
export declare type FlexWrapValue = string;
export declare type FontSizeValue<Platform extends PlatformKey = unknown, Output extends OutputVariantKey = unknown> = Output extends 'required' ? Platform extends 'react-native' ? number : string : string;
export declare type FontStyleValue = string;
export declare type FontValue = string;
export declare type FontWeightValue<Platform extends PlatformKey = unknown, Output extends OutputVariantKey = unknown> = Output extends 'required' ? Platform extends 'react-native' ? 'normal' | 'bold' | '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900' : string | number : string | number;
export declare type GapValue = string;
export declare type JustifyContentValue = string;
export declare type LineHeightValue = string | number;
export declare type ObjectFitValue = string;
export declare type OpacityValue<Platform extends PlatformKey = unknown, Output extends OutputVariantKey = unknown> = Output extends 'required' ? Platform extends 'react-native' ? number : string : string;
export declare type OutlineOffsetValue = string;
export declare type OutlineWidthValue = string;
export declare type OutlineColorValue = string;
export declare type OutlineStyleValue = string;
export declare type PositionValue = string;
export declare type PointerEventsValue = string;
export declare type RadiusValue<Platform extends PlatformKey = unknown, Output extends OutputVariantKey = unknown> = Output extends 'required' ? Platform extends 'react-native' ? number : string : string;
export declare type ShadowValue = {
    offsetX: string;
    offsetY: string;
    blurRadius: string;
    spreadRadius?: string;
    color: string;
} | string;
export declare type StrokeFilledValue = string;
export declare type StrokeEmptyValue = string;
export declare type StrokeLinecapValue = string;
export declare type StrokeWidthValue = string;
export declare type SpaceValue<Platform extends PlatformKey = unknown> = Platform extends 'react-native' ? string | number : string;
export declare type TextAlignValue = string;
export declare type TimeValue<Platform extends PlatformKey = unknown, Output extends OutputVariantKey = unknown> = Output extends 'required' ? Platform extends 'react-native' ? number : string : string;
export declare type TransformValue = string;
export declare type TransitionDurationValue = string;
export declare type TransitionPropertyValue = string;
export declare type TransitionTimingFunctionValue = string;
export declare type VerticalAlignValue = string;
export declare type WhiteSpaceValue = string;
export declare type WordBreakValue = string;
/**
 * Mapping of design token value types to style property keys
 */
interface TokenStandardProperties {
    animationDuration: AnimationDurationValue;
    animationTimingFunction: AnimationTimingFunctionValue;
    alignItems: AlignItemsValue;
    alignContent: AlignContentValue;
    backgroundColor: BackgroundColorValue;
    borderBlockEnd: BorderValue;
    borderBlockEndColor: ColorValue;
    borderBlockStart: BorderValue;
    borderCollapse: BorderCollapseValue;
    borderColor: BorderColorValue;
    borderInlineEnd: BorderValue;
    borderInlineStart: BorderValue;
    borderRadius: BorderRadiusValue;
    borderStyle: BorderStyleValue;
    borderWidth: BorderWidthValue;
    border: BorderValue;
    bottom: SpaceValue;
    boxSizing: BoxSizingValue;
    boxShadow: BoxShadowValue;
    captionSide: CaptionSideValue;
    color: ColorValue;
    cursor: CursorValue;
    display: DisplayValue;
    fill: DesignToken<ColorValue>;
    flexDirection: FlexDirectionValue;
    flex: FlexValue;
    flexWrap: FlexWrapValue;
    fontStyle: FontStyleValue;
    font: FontValue;
    fontSize: FontSizeValue;
    fontWeight: FontWeightValue;
    gap: GapValue;
    height: SpaceValue;
    justifyContent: JustifyContentValue;
    left: SpaceValue;
    lineHeight: LineHeightValue;
    margin: SpaceValue;
    marginLeft: SpaceValue;
    marginRight: SpaceValue;
    marginBlockStart: SpaceValue;
    maxHeight: SpaceValue;
    maxWidth: SpaceValue;
    minHeight: SpaceValue;
    minWidth: SpaceValue;
    objectFit: ObjectFitValue;
    objectPosition: PositionValue;
    opacity: OpacityValue;
    outlineOffset: OutlineOffsetValue;
    outlineWidth: OutlineWidthValue;
    outlineColor: OutlineColorValue;
    outlineStyle: OutlineStyleValue;
    padding: SpaceValue;
    paddingBlock: SpaceValue;
    paddingBlockEnd: SpaceValue;
    paddingBlockStart: SpaceValue;
    paddingBottom: SpaceValue;
    paddingInline: SpaceValue;
    paddingInlineEnd: SpaceValue;
    paddingInlineStart: SpaceValue;
    paddingLeft: SpaceValue;
    paddingRight: SpaceValue;
    paddingTop: SpaceValue;
    pointerEvents: PointerEventsValue;
    position: PositionValue;
    right: SpaceValue;
    strokeLinecap: StrokeLinecapValue;
    strokeWidth: StrokeWidthValue;
    textAlign: TextAlignValue;
    top: SpaceValue;
    transform: TransformValue;
    transitionDuration: TransitionDurationValue;
    transitionProperty: TransitionPropertyValue;
    transitionTimingFunction: TransitionTimingFunctionValue;
    verticalAlign: VerticalAlignValue;
    whiteSpace: WhiteSpaceValue;
    width: SpaceValue;
    wordBreak: WordBreakValue;
}
/**
 * Custom style tokens with non-css property names
 */
interface TokenCustomProperties {
    borderBottomLeftRadius: RadiusValue;
    borderBottomRightRadius: RadiusValue;
    borderEndEndRadius: RadiusValue;
    borderEndStartRadius: RadiusValue;
    borderStartEndRadius: RadiusValue;
    borderStartStartRadius: RadiusValue;
    borderTopLeftRadius: RadiusValue;
    borderTopRightRadius: RadiusValue;
    duration: TimeValue;
    endColor: ColorValue;
    marginTop: SpaceValue;
    paddingHorizontal: SpaceValue;
    paddingVertical: SpaceValue;
    shadow: ShadowValue;
    size: SpaceValue;
    startColor: ColorValue;
    strokeEmpty: StrokeEmptyValue;
    strokeFilled: StrokeFilledValue;
    time: TimeValue;
}
interface TokenProperties extends TokenStandardProperties, TokenCustomProperties {
}
declare type TokenProperty = keyof TokenProperties;
declare type Property = Extract<keyof Properties, TokenProperty> | keyof TokenCustomProperties;
export declare type OutputVariantKey = 'default' | 'optional' | 'required' | unknown;
/**
 * Return interface with all types optional for custom theme input
 */
declare type OptionalDesignTokenProperties<Keys extends Property> = Partial<{
    [Key in Keys]?: DesignToken<TokenProperties[Key]>;
}>;
/**
 * Return interface with all types required for strict theme output
 */
declare type RequiredDesignTokenProperties<Keys extends TokenProperty> = {
    [Key in Keys]: WebDesignToken<TokenProperties[Key]>;
};
/**
 * Return interface with all types required for strict theme output
 */
declare type DefaultDesignTokenProperties<Keys extends TokenProperty> = Required<{
    [Key in Keys]: DesignToken<TokenProperties[Key]>;
}>;
/**
 * Utility for creating interfaces for components from supported CSS property keys
 */
export declare type DesignTokenProperties<Keys extends TokenProperty, Output extends OutputVariantKey = unknown> = Output extends 'required' ? RequiredDesignTokenProperties<Keys> : Output extends 'optional' ? OptionalDesignTokenProperties<Keys> : DefaultDesignTokenProperties<Keys>;
export declare type PlatformKey = 'web' | 'react-native' | 'android' | 'ios' | unknown;
declare type PropKey = string | number;
declare type RequiredTokenValues<PropertyValueKey extends PropKey, PropertyValue, Platform extends PlatformKey = unknown> = Record<PropertyValueKey, Platform extends 'react-native' ? PropertyValue : WebDesignToken<PropertyValue>>;
declare type OptionalTokenValues<PropertyValueKey extends PropKey, PropertyValue, Platform extends PlatformKey = unknown> = Partial<Record<PropertyValueKey, DesignToken<PropertyValue>>>;
declare type DefaultTokenValues<PropertyValueKey extends PropKey, PropertyValue, Platform extends PlatformKey = unknown> = Required<Record<PropertyValueKey, DesignToken<PropertyValue>>>;
/**
 * Utility for creating token interfaces in `Theme`
 */
export declare type DesignTokenValues<PropertyValueKey extends PropKey, PropertyValue, Output extends OutputVariantKey = unknown, Platform extends PlatformKey = unknown> = Output extends 'required' ? RequiredTokenValues<PropertyValueKey, PropertyValue, Platform> : Output extends 'optional' ? OptionalTokenValues<PropertyValueKey, PropertyValue, Platform> : DefaultTokenValues<PropertyValueKey, PropertyValue, Platform>;
export {};
